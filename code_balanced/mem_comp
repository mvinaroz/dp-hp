#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb 16 09:38:05 2021

@author: amin2
"""
import numpy as np
import matplotlib.pyplot as plt
#%% Parameters

t_order     =   5
n_data      =   50000
n_data_g    =   1000
n_epochs    =   10
d_upp       =   10
d_upp2      =   15
d           =   np.arange(d_upp)
d2          =   np.arange(d_upp2)
#%% Memory

mem1    =   t_order* n_data + t_order*n_data_g+n_data**2+n_data*n_data_g+n_data_g**2*np.ones([d_upp2,])
mem2    =   t_order**d2
mem3    =   t_order**d2

#%% Complexity

com1    =   n_epochs*d*t_order*n_data+n_epochs*d*t_order*(n_data**2+n_data*n_data_g+n_data_g**2)
com2    =   n_data*t_order**d+n_data*d*t_order+n_epochs*(n_data_g*t_order**d+n_data_g*d*t_order+t_order**d)
com3    =   n_epochs*(n_data*t_order**d+n_data*d*t_order+n_data_g*t_order**d+n_data_g*d*t_order+t_order**d)

#%%Figures

fig, axs = plt.subplots(2, figsize=(10, 11))
fig.suptitle('Complexity and Memory of Three Methods')

axs[0].plot(d2, mem1, '-r', label='cross methods')
axs[0].plot(d2, mem2, '-b', label= 'mean embedding method')
axs[0].plot(d2, mem3, '-k', label= 'mean embedding subsampling method')
axs[0].legend()
axs[0].set_ylabel('Memory')

axs[1].plot(d, com1, '-r', label='cross methods')
axs[1].plot( d, com2, '-b', label= 'mean embedding method')
axs[1].plot(d, com3, '-k', label= 'mean embedding subsampling method')
axs[1].set_ylabel('Complexity')
axs[1].set_xlabel('Dimension')
axs[1].legend()