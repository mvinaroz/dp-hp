


{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 10, 'subsampled_rate': 0.3} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48437841 0.51562159] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48437151 0.51562849]
before perturbation, mean and variance of data mean embedding are 0.033443 and 0.118632 
after perturbation, mean and variance of data mean embedding are 0.033161 and 0.118394 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.683
PRC on test generated data is 0.616

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.720
PRC on test generated data is 0.665

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.708
PRC on test generated data is 0.639

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.677
PRC on test generated data is 0.612

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.697
PRC on test generated data is 0.630

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.692
PRC on test generated data is 0.625

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.628
PRC on test generated data is 0.574

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.631
PRC on test generated data is 0.578

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.694
PRC on test generated data is 0.631

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.631
PRC on test generated data is 0.576

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.671
PRC on test generated data is 0.609

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.612
PRC on test generated data is 0.565
----------------------------------------
roc mean across methods is 0.670
prc mean across methods is 0.610


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48554366 0.51445634] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48630379 0.51369621]
before perturbation, mean and variance of data mean embedding are 0.034138 and 0.119135 
after perturbation, mean and variance of data mean embedding are 0.033895 and 0.119177 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.596
PRC on test generated data is 0.565

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.557
PRC on test generated data is 0.540

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.663
PRC on test generated data is 0.626

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.607
PRC on test generated data is 0.572

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.591
PRC on test generated data is 0.561

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.615
PRC on test generated data is 0.577

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.607
PRC on test generated data is 0.570

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.583
PRC on test generated data is 0.556

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.596
PRC on test generated data is 0.564

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.594
PRC on test generated data is 0.562

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.617
PRC on test generated data is 0.582

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.601
PRC on test generated data is 0.568
----------------------------------------
roc mean across methods is 0.602
prc mean across methods is 0.570


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48598063 0.51401937] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48614342 0.51385658]
before perturbation, mean and variance of data mean embedding are 0.033661 and 0.118766 
after perturbation, mean and variance of data mean embedding are 0.033836 and 0.119042 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.675
PRC on test generated data is 0.624

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.741
PRC on test generated data is 0.680

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.727
PRC on test generated data is 0.669

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.639
PRC on test generated data is 0.599

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.726
PRC on test generated data is 0.679

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.685
PRC on test generated data is 0.630

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.725
PRC on test generated data is 0.668

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.744
PRC on test generated data is 0.690

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.734
PRC on test generated data is 0.685

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.738
PRC on test generated data is 0.676

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.683
PRC on test generated data is 0.631

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.721
PRC on test generated data is 0.671
----------------------------------------
roc mean across methods is 0.712
prc mean across methods is 0.659


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48503386 0.51496614] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48474481 0.51525519]
before perturbation, mean and variance of data mean embedding are 0.033820 and 0.119011 
after perturbation, mean and variance of data mean embedding are 0.033307 and 0.119123 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.646
PRC on test generated data is 0.594

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.714
PRC on test generated data is 0.656

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.723
PRC on test generated data is 0.655

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.663
PRC on test generated data is 0.609

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.705
PRC on test generated data is 0.652

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.650
PRC on test generated data is 0.599

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.724
PRC on test generated data is 0.660

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.710
PRC on test generated data is 0.659

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.735
PRC on test generated data is 0.678

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.715
PRC on test generated data is 0.651

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.693
PRC on test generated data is 0.637

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.740
PRC on test generated data is 0.677
----------------------------------------
roc mean across methods is 0.701
prc mean across methods is 0.644


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48532518 0.51467482] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48632958 0.51367042]
before perturbation, mean and variance of data mean embedding are 0.033417 and 0.118724 
after perturbation, mean and variance of data mean embedding are 0.033262 and 0.118765 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.598
PRC on test generated data is 0.569

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.601
PRC on test generated data is 0.564

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.671
PRC on test generated data is 0.620

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.654
PRC on test generated data is 0.607

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.610
PRC on test generated data is 0.575

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.581
PRC on test generated data is 0.556

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.610
PRC on test generated data is 0.572

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.640
PRC on test generated data is 0.603

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.656
PRC on test generated data is 0.612

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.599
PRC on test generated data is 0.563

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.609
PRC on test generated data is 0.571

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.603
PRC on test generated data is 0.572
----------------------------------------
roc mean across methods is 0.619
prc mean across methods is 0.582


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.63955902 0.66655566 0.69830022 0.64806555 0.66608164 0.6446666
 0.65860847 0.66161206 0.68315963 0.65535976 0.6548238  0.65540413]
Average PRC each method:  [0.59375781 0.62119659 0.64184238 0.59972341 0.61946694 0.59740019
 0.60882941 0.61708738 0.63424326 0.6057241  0.60595226 0.61049936]
Std ROC each method:  [0.03672792 0.07335937 0.02669161 0.02400924 0.05435514 0.04229331
 0.05402648 0.05787892 0.05250008 0.05984433 0.03473755 0.06150981]
Std PRC each method:  [0.02378179 0.05743221 0.01824644 0.01475015 0.04481271 0.02823723
 0.04519094 0.0504009  0.04464874 0.04812275 0.02614057 0.05195189]
Average over repetitions across all methods
Average ROC:  0.6610163779457592
Average PRC:  0.6129769245120428
Std ROC:  0.04351305712714392
Variance PRC:  0.034169893789834885 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 10, 'subsampled_rate': 0.4} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55527701 0.44472299] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55618588 0.44381412]
before perturbation, mean and variance of data mean embedding are 0.033279 and 0.119006 
after perturbation, mean and variance of data mean embedding are 0.033037 and 0.118763 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.667
PRC on test generated data is 0.528

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.707
PRC on test generated data is 0.578

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.674
PRC on test generated data is 0.535

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.663
PRC on test generated data is 0.525

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.685
PRC on test generated data is 0.541

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.662
PRC on test generated data is 0.523

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.656
PRC on test generated data is 0.518

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.655
PRC on test generated data is 0.518

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.674
PRC on test generated data is 0.536

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.658
PRC on test generated data is 0.520

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.690
PRC on test generated data is 0.549

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.625
PRC on test generated data is 0.496
----------------------------------------
roc mean across methods is 0.668
prc mean across methods is 0.531


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55602908 0.44397092] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55665358 0.44334642]
before perturbation, mean and variance of data mean embedding are 0.033060 and 0.118702 
after perturbation, mean and variance of data mean embedding are 0.032851 and 0.118709 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.678
PRC on test generated data is 0.545

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.750
PRC on test generated data is 0.607

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.752
PRC on test generated data is 0.619

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.694
PRC on test generated data is 0.560

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.715
PRC on test generated data is 0.599

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.650
PRC on test generated data is 0.525

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.733
PRC on test generated data is 0.622

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.721
PRC on test generated data is 0.605

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.731
PRC on test generated data is 0.607

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.743
PRC on test generated data is 0.625

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.691
PRC on test generated data is 0.572

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.714
PRC on test generated data is 0.603
----------------------------------------
roc mean across methods is 0.714
prc mean across methods is 0.591


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55715718 0.44284282] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55731908 0.44268092]
before perturbation, mean and variance of data mean embedding are 0.032283 and 0.118374 
after perturbation, mean and variance of data mean embedding are 0.032433 and 0.118620 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.664
PRC on test generated data is 0.543

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.725
PRC on test generated data is 0.597

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.741
PRC on test generated data is 0.618

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.673
PRC on test generated data is 0.551

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.708
PRC on test generated data is 0.589

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.674
PRC on test generated data is 0.551

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.733
PRC on test generated data is 0.607

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.734
PRC on test generated data is 0.615

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.724
PRC on test generated data is 0.601

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.725
PRC on test generated data is 0.595

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.681
PRC on test generated data is 0.563

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.706
PRC on test generated data is 0.586
----------------------------------------
roc mean across methods is 0.707
prc mean across methods is 0.585


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55872399 0.44127601] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55861891 0.44138109]
before perturbation, mean and variance of data mean embedding are 0.032571 and 0.118144 
after perturbation, mean and variance of data mean embedding are 0.032130 and 0.118198 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.657
PRC on test generated data is 0.553

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.747
PRC on test generated data is 0.635

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.739
PRC on test generated data is 0.643

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.647
PRC on test generated data is 0.547

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.727
PRC on test generated data is 0.616

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.659
PRC on test generated data is 0.556

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.734
PRC on test generated data is 0.623

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.725
PRC on test generated data is 0.616

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.719
PRC on test generated data is 0.614

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.728
PRC on test generated data is 0.619

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.707
PRC on test generated data is 0.596

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.719
PRC on test generated data is 0.612
----------------------------------------
roc mean across methods is 0.709
prc mean across methods is 0.602


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55696917 0.44303083] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.5569645 0.4430355]
before perturbation, mean and variance of data mean embedding are 0.033564 and 0.119454 
after perturbation, mean and variance of data mean embedding are 0.033430 and 0.119456 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.612
PRC on test generated data is 0.508

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.557
PRC on test generated data is 0.466

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.675
PRC on test generated data is 0.560

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.619
PRC on test generated data is 0.511

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.589
PRC on test generated data is 0.486

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.620
PRC on test generated data is 0.516

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.655
PRC on test generated data is 0.547

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.631
PRC on test generated data is 0.519

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.627
PRC on test generated data is 0.513

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.635
PRC on test generated data is 0.523

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.641
PRC on test generated data is 0.530

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.618
PRC on test generated data is 0.509
----------------------------------------
roc mean across methods is 0.623
prc mean across methods is 0.516


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.65577081 0.69702096 0.7161065  0.65919212 0.6845877  0.65273353
 0.70219048 0.69321293 0.69494329 0.69800734 0.6820344  0.67627787]
Average PRC each method:  [0.5354875  0.57665265 0.59511689 0.53862468 0.56626937 0.53432454
 0.58340626 0.57475062 0.57412184 0.57620511 0.56192979 0.56103027]
Std ROC each method:  [0.02266058 0.07164382 0.03459055 0.02539321 0.04982599 0.01814526
 0.03800345 0.04184983 0.03934484 0.04296806 0.02225946 0.04507029]
Std PRC each method:  [0.01584646 0.05840488 0.04070869 0.01790808 0.04715452 0.01611995
 0.04301604 0.04570064 0.04146918 0.04619418 0.02206323 0.04891689]
Average over repetitions across all methods
Average ROC:  0.684339827509542
Average PRC:  0.5648266275207311
Std ROC:  0.0347521628962044
Variance PRC:  0.03486675627140946 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 10, 'subsampled_rate': 0.5} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61144114 0.38855886] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61106803 0.38893197]
before perturbation, mean and variance of data mean embedding are 0.032354 and 0.120217 
after perturbation, mean and variance of data mean embedding are 0.032141 and 0.119975 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.660
PRC on test generated data is 0.486

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.739
PRC on test generated data is 0.575

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.709
PRC on test generated data is 0.536

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.674
PRC on test generated data is 0.499

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.732
PRC on test generated data is 0.559

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.662
PRC on test generated data is 0.488

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.733
PRC on test generated data is 0.570

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.714
PRC on test generated data is 0.556

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.733
PRC on test generated data is 0.566

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.708
PRC on test generated data is 0.556

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.694
PRC on test generated data is 0.534

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.707
PRC on test generated data is 0.553
----------------------------------------
roc mean across methods is 0.705
prc mean across methods is 0.540


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.60962596 0.39037404] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.60995232 0.39004768]
before perturbation, mean and variance of data mean embedding are 0.033384 and 0.121304 
after perturbation, mean and variance of data mean embedding are 0.033200 and 0.121303 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.675
PRC on test generated data is 0.480

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.729
PRC on test generated data is 0.536

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.728
PRC on test generated data is 0.536

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.672
PRC on test generated data is 0.477

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.691
PRC on test generated data is 0.502

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.676
PRC on test generated data is 0.481

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.701
PRC on test generated data is 0.501

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.652
PRC on test generated data is 0.473

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.711
PRC on test generated data is 0.517

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.705
PRC on test generated data is 0.510

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.689
PRC on test generated data is 0.497

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.699
PRC on test generated data is 0.507
----------------------------------------
roc mean across methods is 0.694
prc mean across methods is 0.501


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61034103 0.38965897] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61034794 0.38965206]
before perturbation, mean and variance of data mean embedding are 0.032690 and 0.120394 
after perturbation, mean and variance of data mean embedding are 0.032822 and 0.120622 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.696
PRC on test generated data is 0.504

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.704
PRC on test generated data is 0.515

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.721
PRC on test generated data is 0.531

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.697
PRC on test generated data is 0.507

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.679
PRC on test generated data is 0.487

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.707
PRC on test generated data is 0.515

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.654
PRC on test generated data is 0.469

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.679
PRC on test generated data is 0.491

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.702
PRC on test generated data is 0.511

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.641
PRC on test generated data is 0.459

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.718
PRC on test generated data is 0.527

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.651
PRC on test generated data is 0.467
----------------------------------------
roc mean across methods is 0.687
prc mean across methods is 0.498


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.6119912 0.3880088] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.6113449 0.3886551]
before perturbation, mean and variance of data mean embedding are 0.033531 and 0.121117 
after perturbation, mean and variance of data mean embedding are 0.033144 and 0.121157 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.617
PRC on test generated data is 0.463

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.749
PRC on test generated data is 0.578

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.740
PRC on test generated data is 0.588

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.594
PRC on test generated data is 0.447

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.691
PRC on test generated data is 0.537

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.600
PRC on test generated data is 0.451

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.727
PRC on test generated data is 0.565

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.699
PRC on test generated data is 0.544

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.696
PRC on test generated data is 0.541

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.699
PRC on test generated data is 0.545

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.673
PRC on test generated data is 0.513

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.700
PRC on test generated data is 0.543
----------------------------------------
roc mean across methods is 0.682
prc mean across methods is 0.526


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61265127 0.38734873] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61232503 0.38767497]
before perturbation, mean and variance of data mean embedding are 0.032831 and 0.120870 
after perturbation, mean and variance of data mean embedding are 0.032713 and 0.120840 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.582
PRC on test generated data is 0.442

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.529
PRC on test generated data is 0.410

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.656
PRC on test generated data is 0.510

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.610
PRC on test generated data is 0.461

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.617
PRC on test generated data is 0.475

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.641
PRC on test generated data is 0.487

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.641
PRC on test generated data is 0.496

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.623
PRC on test generated data is 0.476

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.626
PRC on test generated data is 0.483

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.641
PRC on test generated data is 0.497

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.600
PRC on test generated data is 0.460

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.636
PRC on test generated data is 0.491
----------------------------------------
roc mean across methods is 0.617
prc mean across methods is 0.474


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.64600235 0.6900419  0.71070839 0.6492787  0.68188026 0.65726209
 0.69115838 0.67349086 0.69368616 0.6789277  0.67477321 0.67844109]
Average PRC each method:  [0.47501609 0.52259993 0.54032667 0.4782654  0.51214586 0.48436496
 0.52031691 0.50793853 0.52366689 0.51330907 0.50604895 0.51218747]
Std ROC each method:  [0.04109995 0.08183875 0.02904484 0.03988617 0.03718932 0.03585311
 0.03746056 0.03244026 0.03623589 0.03081721 0.04011249 0.02926319]
Std PRC each method:  [0.02097724 0.06115012 0.02582326 0.02224977 0.03136755 0.02034976
 0.04023878 0.03509815 0.02832229 0.03488615 0.02624499 0.03192157]
Average over repetitions across all methods
Average ROC:  0.677137589958644
Average PRC:  0.5080155593098471
Std ROC:  0.03111399015630388
Variance PRC:  0.02296948643728751 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 20, 'subsampled_rate': 0.3} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48437841 0.51562159] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48481227 0.51518773]
before perturbation, mean and variance of data mean embedding are 0.017589 and 0.087665 
after perturbation, mean and variance of data mean embedding are 0.017477 and 0.087649 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.698
PRC on test generated data is 0.627

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.616
PRC on test generated data is 0.566

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.730
PRC on test generated data is 0.656

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.709
PRC on test generated data is 0.634

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.725
PRC on test generated data is 0.667

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.681
PRC on test generated data is 0.614

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.747
PRC on test generated data is 0.677

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.743
PRC on test generated data is 0.674

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.746
PRC on test generated data is 0.680

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.747
PRC on test generated data is 0.672

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.723
PRC on test generated data is 0.659

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.741
PRC on test generated data is 0.675
----------------------------------------
roc mean across methods is 0.717
prc mean across methods is 0.650


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48554366 0.51445634] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48577771 0.51422229]
before perturbation, mean and variance of data mean embedding are 0.018050 and 0.087539 
after perturbation, mean and variance of data mean embedding are 0.017861 and 0.087517 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.628
PRC on test generated data is 0.585

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.580
PRC on test generated data is 0.554

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.698
PRC on test generated data is 0.645

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.599
PRC on test generated data is 0.565

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.665
PRC on test generated data is 0.613

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.618
PRC on test generated data is 0.577

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.667
PRC on test generated data is 0.613

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.672
PRC on test generated data is 0.620

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.670
PRC on test generated data is 0.613

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.711
PRC on test generated data is 0.647

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.656
PRC on test generated data is 0.617

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.668
PRC on test generated data is 0.613
----------------------------------------
roc mean across methods is 0.653
prc mean across methods is 0.605


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48598063 0.51401937] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48575865 0.51424135]
before perturbation, mean and variance of data mean embedding are 0.018024 and 0.087788 
after perturbation, mean and variance of data mean embedding are 0.017903 and 0.087779 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.674
PRC on test generated data is 0.625

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.755
PRC on test generated data is 0.696

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.736
PRC on test generated data is 0.675

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.667
PRC on test generated data is 0.618

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.732
PRC on test generated data is 0.683

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.729
PRC on test generated data is 0.666

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.738
PRC on test generated data is 0.683

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.728
PRC on test generated data is 0.687

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.731
PRC on test generated data is 0.689

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.722
PRC on test generated data is 0.669

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.686
PRC on test generated data is 0.639

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.728
PRC on test generated data is 0.686
----------------------------------------
roc mean across methods is 0.719
prc mean across methods is 0.668


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48503386 0.51496614] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48593375 0.51406625]
before perturbation, mean and variance of data mean embedding are 0.017844 and 0.087742 
after perturbation, mean and variance of data mean embedding are 0.017656 and 0.087994 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.640
PRC on test generated data is 0.591

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.657
PRC on test generated data is 0.600

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.718
PRC on test generated data is 0.652

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.651
PRC on test generated data is 0.599

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.682
PRC on test generated data is 0.627

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.668
PRC on test generated data is 0.610

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.715
PRC on test generated data is 0.655

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.669
PRC on test generated data is 0.622

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.697
PRC on test generated data is 0.642

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.718
PRC on test generated data is 0.658

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.669
PRC on test generated data is 0.619

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.700
PRC on test generated data is 0.644
----------------------------------------
roc mean across methods is 0.682
prc mean across methods is 0.627


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48532518 0.51467482] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48444037 0.51555963]
before perturbation, mean and variance of data mean embedding are 0.017874 and 0.087829 
after perturbation, mean and variance of data mean embedding are 0.017854 and 0.087912 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.639
PRC on test generated data is 0.592

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.643
PRC on test generated data is 0.593

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.712
PRC on test generated data is 0.649

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.654
PRC on test generated data is 0.606

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.642
PRC on test generated data is 0.604

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.640
PRC on test generated data is 0.595

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.707
PRC on test generated data is 0.651

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.655
PRC on test generated data is 0.618

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.653
PRC on test generated data is 0.611

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.684
PRC on test generated data is 0.629

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.654
PRC on test generated data is 0.606

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.664
PRC on test generated data is 0.621
----------------------------------------
roc mean across methods is 0.662
prc mean across methods is 0.615


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.65575083 0.65021687 0.71877733 0.65593118 0.68939598 0.66721012
 0.71485243 0.6930641  0.69952276 0.71639666 0.67750144 0.70018174]
Average PRC each method:  [0.60399223 0.60171519 0.65526515 0.60439194 0.63891415 0.61239754
 0.65587597 0.64402547 0.64728254 0.65517636 0.62820558 0.64808764]
Std ROC each method:  [0.02631411 0.05838871 0.01309863 0.03522171 0.03466293 0.03808126
 0.02775075 0.03511514 0.03528845 0.02002056 0.02527613 0.03097054]
Std PRC each method:  [0.01810891 0.05003933 0.01035802 0.02308343 0.03077273 0.02961706
 0.0248167  0.02979205 0.03259496 0.01584925 0.01886994 0.02865796]
Average over repetitions across all methods
Average ROC:  0.6865667866692717
Average PRC:  0.6329441470415623
Std ROC:  0.027269920423349726
Variance PRC:  0.023075981935765707 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 20, 'subsampled_rate': 0.4} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55527701 0.44472299] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55532224 0.44467776]
before perturbation, mean and variance of data mean embedding are 0.017481 and 0.087742 
after perturbation, mean and variance of data mean embedding are 0.017384 and 0.087716 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.672
PRC on test generated data is 0.533

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.701
PRC on test generated data is 0.567

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.691
PRC on test generated data is 0.551

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.666
PRC on test generated data is 0.528

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.693
PRC on test generated data is 0.560

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.667
PRC on test generated data is 0.529

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.652
PRC on test generated data is 0.517

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.678
PRC on test generated data is 0.542

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.704
PRC on test generated data is 0.564

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.650
PRC on test generated data is 0.513

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.696
PRC on test generated data is 0.560

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.679
PRC on test generated data is 0.542
----------------------------------------
roc mean across methods is 0.679
prc mean across methods is 0.542


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55602908 0.44397092] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55524587 0.44475413]
before perturbation, mean and variance of data mean embedding are 0.017713 and 0.088246 
after perturbation, mean and variance of data mean embedding are 0.017551 and 0.088229 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.637
PRC on test generated data is 0.512

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.656
PRC on test generated data is 0.523

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.740
PRC on test generated data is 0.612

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.651
PRC on test generated data is 0.521

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.647
PRC on test generated data is 0.523

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.639
PRC on test generated data is 0.515

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.712
PRC on test generated data is 0.571

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.686
PRC on test generated data is 0.550

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.702
PRC on test generated data is 0.567

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.705
PRC on test generated data is 0.566

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.617
PRC on test generated data is 0.503

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.687
PRC on test generated data is 0.555
----------------------------------------
roc mean across methods is 0.673
prc mean across methods is 0.543


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55715718 0.44284282] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55722299 0.44277701]
before perturbation, mean and variance of data mean embedding are 0.017565 and 0.087818 
after perturbation, mean and variance of data mean embedding are 0.017462 and 0.087789 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.659
PRC on test generated data is 0.542

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.748
PRC on test generated data is 0.618

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.736
PRC on test generated data is 0.630

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.663
PRC on test generated data is 0.546

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.712
PRC on test generated data is 0.608

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.725
PRC on test generated data is 0.594

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.719
PRC on test generated data is 0.611

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.714
PRC on test generated data is 0.603

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.690
PRC on test generated data is 0.572

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.719
PRC on test generated data is 0.611

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.689
PRC on test generated data is 0.576

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.719
PRC on test generated data is 0.611
----------------------------------------
roc mean across methods is 0.708
prc mean across methods is 0.593


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55872399 0.44127601] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55947222 0.44052778]
before perturbation, mean and variance of data mean embedding are 0.017173 and 0.087418 
after perturbation, mean and variance of data mean embedding are 0.017010 and 0.087581 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.681
PRC on test generated data is 0.571

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.761
PRC on test generated data is 0.647

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.742
PRC on test generated data is 0.646

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.646
PRC on test generated data is 0.547

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.692
PRC on test generated data is 0.591

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.664
PRC on test generated data is 0.559

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.748
PRC on test generated data is 0.647

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.716
PRC on test generated data is 0.612

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.710
PRC on test generated data is 0.608

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.743
PRC on test generated data is 0.644

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.695
PRC on test generated data is 0.587

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.712
PRC on test generated data is 0.609
----------------------------------------
roc mean across methods is 0.709
prc mean across methods is 0.606


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55696917 0.44303083] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55687887 0.44312113]
before perturbation, mean and variance of data mean embedding are 0.017731 and 0.087693 
after perturbation, mean and variance of data mean embedding are 0.017714 and 0.087736 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.589
PRC on test generated data is 0.491

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.506
PRC on test generated data is 0.438

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.677
PRC on test generated data is 0.559

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.599
PRC on test generated data is 0.497

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.635
PRC on test generated data is 0.521

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.550
PRC on test generated data is 0.464

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.649
PRC on test generated data is 0.546

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.651
PRC on test generated data is 0.537

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.644
PRC on test generated data is 0.530

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.659
PRC on test generated data is 0.551

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.638
PRC on test generated data is 0.537

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.655
PRC on test generated data is 0.540
----------------------------------------
roc mean across methods is 0.621
prc mean across methods is 0.517


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.64782115 0.67454613 0.71698205 0.64484011 0.67575841 0.64931007
 0.69593508 0.68881843 0.68989588 0.69516399 0.6671505  0.69035695]
Average PRC each method:  [0.52973444 0.55861213 0.59972855 0.52768461 0.56073029 0.53223526
 0.57819845 0.56863194 0.568336   0.57687419 0.55238861 0.5712737 ]
Std ROC each method:  [0.0327612  0.09198152 0.02751663 0.02391399 0.02944916 0.05696861
 0.03898162 0.02423924 0.0238853  0.03532328 0.03306621 0.02315941]
Std PRC each method:  [0.02706403 0.07368782 0.03795096 0.01827932 0.03523771 0.04369705
 0.04619548 0.03194334 0.02486285 0.04594673 0.02979776 0.03206342]
Average over repetitions across all methods
Average ROC:  0.6780482277739546
Average PRC:  0.5603690139961519
Std ROC:  0.031967941112769
Variance PRC:  0.03348709400502313 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 20, 'subsampled_rate': 0.5} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61144114 0.38855886] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61139012 0.38860988]
before perturbation, mean and variance of data mean embedding are 0.017669 and 0.089341 
after perturbation, mean and variance of data mean embedding are 0.017584 and 0.089310 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.660
PRC on test generated data is 0.486

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.594
PRC on test generated data is 0.435

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.723
PRC on test generated data is 0.559

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.671
PRC on test generated data is 0.495

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.683
PRC on test generated data is 0.518

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.656
PRC on test generated data is 0.483

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.709
PRC on test generated data is 0.530

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.689
PRC on test generated data is 0.529

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.719
PRC on test generated data is 0.551

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.703
PRC on test generated data is 0.525

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.688
PRC on test generated data is 0.513

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.697
PRC on test generated data is 0.531
----------------------------------------
roc mean across methods is 0.683
prc mean across methods is 0.513


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.60962596 0.39037404] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61026571 0.38973429]
before perturbation, mean and variance of data mean embedding are 0.017415 and 0.088984 
after perturbation, mean and variance of data mean embedding are 0.017272 and 0.088976 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.670
PRC on test generated data is 0.475

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.653
PRC on test generated data is 0.460

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.740
PRC on test generated data is 0.562

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.680
PRC on test generated data is 0.484

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.730
PRC on test generated data is 0.532

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.579
PRC on test generated data is 0.414

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.728
PRC on test generated data is 0.534

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.708
PRC on test generated data is 0.517

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.739
PRC on test generated data is 0.555

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.713
PRC on test generated data is 0.521

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.680
PRC on test generated data is 0.495

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.723
PRC on test generated data is 0.539
----------------------------------------
roc mean across methods is 0.695
prc mean across methods is 0.507


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61034103 0.38965897] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61080386 0.38919614]
before perturbation, mean and variance of data mean embedding are 0.017353 and 0.088994 
after perturbation, mean and variance of data mean embedding are 0.017262 and 0.088963 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.674
PRC on test generated data is 0.486

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.682
PRC on test generated data is 0.492

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.765
PRC on test generated data is 0.598

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.646
PRC on test generated data is 0.466

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.716
PRC on test generated data is 0.538

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.631
PRC on test generated data is 0.454

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.736
PRC on test generated data is 0.546

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.725
PRC on test generated data is 0.556

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.738
PRC on test generated data is 0.565

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.740
PRC on test generated data is 0.548

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.674
PRC on test generated data is 0.496

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.718
PRC on test generated data is 0.547
----------------------------------------
roc mean across methods is 0.704
prc mean across methods is 0.524


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.6119912 0.3880088] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.612177 0.387823]
before perturbation, mean and variance of data mean embedding are 0.017483 and 0.088774 
after perturbation, mean and variance of data mean embedding are 0.017341 and 0.088884 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.626
PRC on test generated data is 0.467

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.687
PRC on test generated data is 0.509

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.727
PRC on test generated data is 0.571

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.593
PRC on test generated data is 0.444

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.665
PRC on test generated data is 0.505

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.655
PRC on test generated data is 0.488

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.698
PRC on test generated data is 0.550

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.657
PRC on test generated data is 0.501

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.676
PRC on test generated data is 0.517

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.697
PRC on test generated data is 0.551

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.647
PRC on test generated data is 0.484

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.634
PRC on test generated data is 0.485
----------------------------------------
roc mean across methods is 0.664
prc mean across methods is 0.506


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61265127 0.38734873] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61328527 0.38671473]
before perturbation, mean and variance of data mean embedding are 0.017297 and 0.088622 
after perturbation, mean and variance of data mean embedding are 0.017282 and 0.088653 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.641
PRC on test generated data is 0.484

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.641
PRC on test generated data is 0.479

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.722
PRC on test generated data is 0.587

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.645
PRC on test generated data is 0.485

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.677
PRC on test generated data is 0.522

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.624
PRC on test generated data is 0.473

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.706
PRC on test generated data is 0.551

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.664
PRC on test generated data is 0.511

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.688
PRC on test generated data is 0.541

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.698
PRC on test generated data is 0.540

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.645
PRC on test generated data is 0.490

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.682
PRC on test generated data is 0.532
----------------------------------------
roc mean across methods is 0.669
prc mean across methods is 0.516


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.65422496 0.6513159  0.73551664 0.64696376 0.69433899 0.62881019
 0.71553598 0.68864625 0.71206076 0.71025265 0.6666779  0.69092667]
Average PRC each method:  [0.47958372 0.4748974  0.57527756 0.47488037 0.52289669 0.46260554
 0.54218078 0.52281166 0.54574256 0.53704275 0.49578322 0.5267748 ]
Std ROC each method:  [0.01786139 0.0336542  0.01604508 0.03052263 0.02461464 0.02802177
 0.01422203 0.02574461 0.02563739 0.01609768 0.01760085 0.03198651]
Std PRC each method:  [0.00755406 0.02552192 0.01481883 0.01816795 0.01148544 0.02686472
 0.00847563 0.01885383 0.01600715 0.01204171 0.00975298 0.02154768]
Average over repetitions across all methods
Average ROC:  0.6829392201276036
Average PRC:  0.5133730865320777
Std ROC:  0.015169774178930867
Variance PRC:  0.006625581647993856 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 50, 'subsampled_rate': 0.3} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48437841 0.51562159] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48338028 0.51661972]
before perturbation, mean and variance of data mean embedding are 0.007197 and 0.056904 
after perturbation, mean and variance of data mean embedding are 0.007103 and 0.057105 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.696
PRC on test generated data is 0.625

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.632
PRC on test generated data is 0.576

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.740
PRC on test generated data is 0.668

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.681
PRC on test generated data is 0.612

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.702
PRC on test generated data is 0.650

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.682
PRC on test generated data is 0.615

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.743
PRC on test generated data is 0.678

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.722
PRC on test generated data is 0.666

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.715
PRC on test generated data is 0.657

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.717
PRC on test generated data is 0.663

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.681
PRC on test generated data is 0.624

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.710
PRC on test generated data is 0.657
----------------------------------------
roc mean across methods is 0.702
prc mean across methods is 0.641


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48554366 0.51445634] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48594012 0.51405988]
before perturbation, mean and variance of data mean embedding are 0.007411 and 0.056996 
after perturbation, mean and variance of data mean embedding are 0.007367 and 0.057024 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.655
PRC on test generated data is 0.604

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.574
PRC on test generated data is 0.550

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.662
PRC on test generated data is 0.607

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.633
PRC on test generated data is 0.588

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.614
PRC on test generated data is 0.575

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.659
PRC on test generated data is 0.607

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.674
PRC on test generated data is 0.618

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.648
PRC on test generated data is 0.599

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.657
PRC on test generated data is 0.605

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.648
PRC on test generated data is 0.598

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.651
PRC on test generated data is 0.608

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.636
PRC on test generated data is 0.590
----------------------------------------
roc mean across methods is 0.642
prc mean across methods is 0.596


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48598063 0.51401937] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48615781 0.51384219]
before perturbation, mean and variance of data mean embedding are 0.007329 and 0.056965 
after perturbation, mean and variance of data mean embedding are 0.007199 and 0.057182 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.692
PRC on test generated data is 0.638

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.649
PRC on test generated data is 0.602

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.729
PRC on test generated data is 0.676

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.675
PRC on test generated data is 0.626

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.719
PRC on test generated data is 0.670

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.690
PRC on test generated data is 0.637

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.746
PRC on test generated data is 0.690

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.727
PRC on test generated data is 0.675

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.741
PRC on test generated data is 0.683

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.737
PRC on test generated data is 0.676

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.693
PRC on test generated data is 0.653

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.730
PRC on test generated data is 0.673
----------------------------------------
roc mean across methods is 0.711
prc mean across methods is 0.658


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48503386 0.51496614] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48622522 0.51377478]
before perturbation, mean and variance of data mean embedding are 0.007324 and 0.057037 
after perturbation, mean and variance of data mean embedding are 0.007253 and 0.057267 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.658
PRC on test generated data is 0.604

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.651
PRC on test generated data is 0.595

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.711
PRC on test generated data is 0.646

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.659
PRC on test generated data is 0.607

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.687
PRC on test generated data is 0.642

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.665
PRC on test generated data is 0.609

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.719
PRC on test generated data is 0.662

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.708
PRC on test generated data is 0.663

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.708
PRC on test generated data is 0.664

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.720
PRC on test generated data is 0.662

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.677
PRC on test generated data is 0.629

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.720
PRC on test generated data is 0.674
----------------------------------------
roc mean across methods is 0.690
prc mean across methods is 0.638


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48532518 0.51467482] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48502992 0.51497008]
before perturbation, mean and variance of data mean embedding are 0.007282 and 0.056801 
after perturbation, mean and variance of data mean embedding are 0.007339 and 0.056989 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.663
PRC on test generated data is 0.611

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.584
PRC on test generated data is 0.553

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.700
PRC on test generated data is 0.642

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.673
PRC on test generated data is 0.619

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.675
PRC on test generated data is 0.622

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.655
PRC on test generated data is 0.604

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.690
PRC on test generated data is 0.632

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.675
PRC on test generated data is 0.619

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.677
PRC on test generated data is 0.624

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.694
PRC on test generated data is 0.633

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.669
PRC on test generated data is 0.613

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.676
PRC on test generated data is 0.623
----------------------------------------
roc mean across methods is 0.669
prc mean across methods is 0.616


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.67256404 0.61822131 0.70830094 0.66434514 0.67937985 0.67018982
 0.71443148 0.6961553  0.69973675 0.70314099 0.67409683 0.69439291]
Average PRC each method:  [0.61609332 0.5753165  0.64775466 0.61039168 0.63180244 0.61419133
 0.65590728 0.64462498 0.64676017 0.6467444  0.6254987  0.64349686]
Std ROC each method:  [0.0174716  0.03270956 0.02704849 0.01719419 0.03580381 0.01349326
 0.02876382 0.03011351 0.02971946 0.03092053 0.01398056 0.03445378]
Std PRC each method:  [0.01317795 0.02115703 0.02407604 0.01309472 0.03221192 0.01195721
 0.02731003 0.0300543  0.02805964 0.02806984 0.01583867 0.03236598]
Average over repetitions across all methods
Average ROC:  0.6829129461666102
Average PRC:  0.6298818599201914
Std ROC:  0.02453299162755009
Variance PRC:  0.021689042076952738 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 50, 'subsampled_rate': 0.4} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55527701 0.44472299] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55559744 0.44440256]
before perturbation, mean and variance of data mean embedding are 0.007269 and 0.056984 
after perturbation, mean and variance of data mean embedding are 0.007188 and 0.057166 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.672
PRC on test generated data is 0.532

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.741
PRC on test generated data is 0.598

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.723
PRC on test generated data is 0.584

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.677
PRC on test generated data is 0.536

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.713
PRC on test generated data is 0.574

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.666
PRC on test generated data is 0.528

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.707
PRC on test generated data is 0.563

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.701
PRC on test generated data is 0.560

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.712
PRC on test generated data is 0.572

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.708
PRC on test generated data is 0.564

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.694
PRC on test generated data is 0.557

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.704
PRC on test generated data is 0.566
----------------------------------------
roc mean across methods is 0.702
prc mean across methods is 0.561


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55602908 0.44397092] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55625334 0.44374666]
before perturbation, mean and variance of data mean embedding are 0.007167 and 0.056977 
after perturbation, mean and variance of data mean embedding are 0.007130 and 0.056956 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.639
PRC on test generated data is 0.516

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.621
PRC on test generated data is 0.496

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.707
PRC on test generated data is 0.573

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.635
PRC on test generated data is 0.513

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.682
PRC on test generated data is 0.579

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.627
PRC on test generated data is 0.509

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.741
PRC on test generated data is 0.623

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.696
PRC on test generated data is 0.587

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.706
PRC on test generated data is 0.604

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.711
PRC on test generated data is 0.597

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.670
PRC on test generated data is 0.555

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.713
PRC on test generated data is 0.603
----------------------------------------
roc mean across methods is 0.679
prc mean across methods is 0.563


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55715718 0.44284282] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55755101 0.44244899]
before perturbation, mean and variance of data mean embedding are 0.007156 and 0.057056 
after perturbation, mean and variance of data mean embedding are 0.007044 and 0.057232 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.679
PRC on test generated data is 0.555

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.765
PRC on test generated data is 0.636

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.743
PRC on test generated data is 0.632

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.668
PRC on test generated data is 0.548

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.708
PRC on test generated data is 0.580

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.682
PRC on test generated data is 0.558

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.718
PRC on test generated data is 0.586

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.713
PRC on test generated data is 0.585

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.717
PRC on test generated data is 0.588

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.720
PRC on test generated data is 0.589

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.635
PRC on test generated data is 0.526

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.707
PRC on test generated data is 0.580
----------------------------------------
roc mean across methods is 0.705
prc mean across methods is 0.580


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55872399 0.44127601] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55850145 0.44149855]
before perturbation, mean and variance of data mean embedding are 0.007032 and 0.056500 
after perturbation, mean and variance of data mean embedding are 0.006971 and 0.056682 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.669
PRC on test generated data is 0.562

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.582
PRC on test generated data is 0.496

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.748
PRC on test generated data is 0.648

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.676
PRC on test generated data is 0.567

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.661
PRC on test generated data is 0.562

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.642
PRC on test generated data is 0.542

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.736
PRC on test generated data is 0.631

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.716
PRC on test generated data is 0.621

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.718
PRC on test generated data is 0.618

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.723
PRC on test generated data is 0.628

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.688
PRC on test generated data is 0.580

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.709
PRC on test generated data is 0.614
----------------------------------------
roc mean across methods is 0.689
prc mean across methods is 0.589


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55696917 0.44303083] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55562022 0.44437978]
before perturbation, mean and variance of data mean embedding are 0.007339 and 0.057303 
after perturbation, mean and variance of data mean embedding are 0.007388 and 0.057449 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.663
PRC on test generated data is 0.544

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.526
PRC on test generated data is 0.449

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.737
PRC on test generated data is 0.627

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.704
PRC on test generated data is 0.581

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.725
PRC on test generated data is 0.602

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.714
PRC on test generated data is 0.590

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.729
PRC on test generated data is 0.596

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.710
PRC on test generated data is 0.584

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.707
PRC on test generated data is 0.595

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.720
PRC on test generated data is 0.590

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.682
PRC on test generated data is 0.572

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.719
PRC on test generated data is 0.597
----------------------------------------
roc mean across methods is 0.695
prc mean across methods is 0.577


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.66430424 0.6470448  0.73154718 0.67188409 0.69779712 0.66625435
 0.72609324 0.70728991 0.71214617 0.71645368 0.6737734  0.71040264]
Average PRC each method:  [0.5417959  0.53480829 0.61270327 0.54918076 0.57921958 0.54538911
 0.59967094 0.58753455 0.59547532 0.59364345 0.55790846 0.59192906]
Std ROC each method:  [0.01388364 0.09199537 0.01498045 0.02221515 0.02336901 0.03056682
 0.01214352 0.00755494 0.00489977 0.00606034 0.0210401  0.00506397]
Std PRC each method:  [0.0162663  0.070003   0.02905666 0.02358004 0.01299096 0.02731989
 0.02484615 0.01950704 0.01567517 0.02042361 0.01861774 0.01684054]
Average over repetitions across all methods
Average ROC:  0.6937492363370963
Average PRC:  0.5741048906575235
Std ROC:  0.009133254597728978
Variance PRC:  0.010568827698774092 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 50, 'subsampled_rate': 0.5} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61144114 0.38855886] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61161031 0.38838969]
before perturbation, mean and variance of data mean embedding are 0.007125 and 0.057847 
after perturbation, mean and variance of data mean embedding are 0.007054 and 0.058008 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.664
PRC on test generated data is 0.490

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.547
PRC on test generated data is 0.408

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.728
PRC on test generated data is 0.576

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.656
PRC on test generated data is 0.484

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.719
PRC on test generated data is 0.542

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.660
PRC on test generated data is 0.487

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.701
PRC on test generated data is 0.535

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.690
PRC on test generated data is 0.528

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.703
PRC on test generated data is 0.534

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.664
PRC on test generated data is 0.515

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.665
PRC on test generated data is 0.499

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.702
PRC on test generated data is 0.541
----------------------------------------
roc mean across methods is 0.675
prc mean across methods is 0.512


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.60962596 0.39037404] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.60976212 0.39023788]
before perturbation, mean and variance of data mean embedding are 0.007206 and 0.057980 
after perturbation, mean and variance of data mean embedding are 0.007174 and 0.057948 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.635
PRC on test generated data is 0.451

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.634
PRC on test generated data is 0.466

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.694
PRC on test generated data is 0.515

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.661
PRC on test generated data is 0.468

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.636
PRC on test generated data is 0.448

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.675
PRC on test generated data is 0.479

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.693
PRC on test generated data is 0.498

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.644
PRC on test generated data is 0.455

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.681
PRC on test generated data is 0.489

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.675
PRC on test generated data is 0.477

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.662
PRC on test generated data is 0.489

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.685
PRC on test generated data is 0.497
----------------------------------------
roc mean across methods is 0.665
prc mean across methods is 0.478


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61034103 0.38965897] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61009851 0.38990149]
before perturbation, mean and variance of data mean embedding are 0.007123 and 0.057780 
after perturbation, mean and variance of data mean embedding are 0.007025 and 0.057921 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.662
PRC on test generated data is 0.477

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.652
PRC on test generated data is 0.465

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.745
PRC on test generated data is 0.576

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.652
PRC on test generated data is 0.468

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.710
PRC on test generated data is 0.524

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.669
PRC on test generated data is 0.482

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.719
PRC on test generated data is 0.529

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.721
PRC on test generated data is 0.538

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.736
PRC on test generated data is 0.549

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.723
PRC on test generated data is 0.530

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.627
PRC on test generated data is 0.458

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.730
PRC on test generated data is 0.541
----------------------------------------
roc mean across methods is 0.696
prc mean across methods is 0.511


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.6119912 0.3880088] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61144156 0.38855844]
before perturbation, mean and variance of data mean embedding are 0.007196 and 0.057399 
after perturbation, mean and variance of data mean embedding are 0.007142 and 0.057544 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.659
PRC on test generated data is 0.490

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.569
PRC on test generated data is 0.425

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.737
PRC on test generated data is 0.587

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.648
PRC on test generated data is 0.485

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.699
PRC on test generated data is 0.550

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.649
PRC on test generated data is 0.486

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.724
PRC on test generated data is 0.556

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.691
PRC on test generated data is 0.544

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.700
PRC on test generated data is 0.559

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.726
PRC on test generated data is 0.566

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.688
PRC on test generated data is 0.516

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.703
PRC on test generated data is 0.559
----------------------------------------
roc mean across methods is 0.683
prc mean across methods is 0.527


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61265127 0.38734873] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61255636 0.38744364]
before perturbation, mean and variance of data mean embedding are 0.007120 and 0.057622 
after perturbation, mean and variance of data mean embedding are 0.007163 and 0.057753 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.677
PRC on test generated data is 0.511

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.522
PRC on test generated data is 0.406

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.732
PRC on test generated data is 0.589

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.698
PRC on test generated data is 0.531

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.704
PRC on test generated data is 0.543

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.684
PRC on test generated data is 0.519

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.717
PRC on test generated data is 0.563

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.723
PRC on test generated data is 0.561

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.723
PRC on test generated data is 0.565

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.731
PRC on test generated data is 0.571

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.691
PRC on test generated data is 0.533

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.706
PRC on test generated data is 0.548
----------------------------------------
roc mean across methods is 0.692
prc mean across methods is 0.537


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.65958582 0.5847453  0.7272624  0.6629829  0.69371795 0.66754464
 0.71086355 0.6938572  0.70860658 0.70378662 0.66673818 0.70547225]
Average PRC each method:  [0.48389686 0.43413882 0.56877041 0.48729436 0.52150927 0.49064482
 0.53617101 0.52529331 0.53903855 0.53192635 0.49915629 0.53715955]
Std ROC each method:  [0.01352027 0.05018779 0.01755478 0.01782555 0.02961927 0.01192491
 0.01160112 0.02875781 0.01929614 0.02812807 0.02284967 0.0141548 ]
Std PRC each method:  [0.01962416 0.02653695 0.02734069 0.02305506 0.0377124  0.01443057
 0.02283306 0.03651241 0.02733366 0.0346534  0.02537244 0.02114499]
Average over repetitions across all methods
Average ROC:  0.6820969496431348
Average PRC:  0.5129166317817245
Std ROC:  0.01128394298853818
Variance PRC:  0.020030117332697828 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 100, 'subsampled_rate': 0.3} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48437841 0.51562159] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.484818 0.515182]
before perturbation, mean and variance of data mean embedding are 0.003725 and 0.040672 
after perturbation, mean and variance of data mean embedding are 0.003634 and 0.040807 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.669
PRC on test generated data is 0.606

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.596
PRC on test generated data is 0.553

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.711
PRC on test generated data is 0.642

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.649
PRC on test generated data is 0.591

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.701
PRC on test generated data is 0.640

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.662
PRC on test generated data is 0.601

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.716
PRC on test generated data is 0.654

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.678
PRC on test generated data is 0.619

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.734
PRC on test generated data is 0.669

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.695
PRC on test generated data is 0.627

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.710
PRC on test generated data is 0.642

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.702
PRC on test generated data is 0.637
----------------------------------------
roc mean across methods is 0.685
prc mean across methods is 0.623


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48554366 0.51445634] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48583529 0.51416471]
before perturbation, mean and variance of data mean embedding are 0.003769 and 0.040688 
after perturbation, mean and variance of data mean embedding are 0.003660 and 0.040911 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.656
PRC on test generated data is 0.606

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.728
PRC on test generated data is 0.662

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.713
PRC on test generated data is 0.653

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.656
PRC on test generated data is 0.605

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.695
PRC on test generated data is 0.636

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.647
PRC on test generated data is 0.599

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.701
PRC on test generated data is 0.642

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.701
PRC on test generated data is 0.641

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.705
PRC on test generated data is 0.645

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.684
PRC on test generated data is 0.625

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.639
PRC on test generated data is 0.596

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.701
PRC on test generated data is 0.641
----------------------------------------
roc mean across methods is 0.686
prc mean across methods is 0.629


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48598063 0.51401937] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.4853061 0.5146939]
before perturbation, mean and variance of data mean embedding are 0.003719 and 0.040565 
after perturbation, mean and variance of data mean embedding are 0.003629 and 0.040665 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.694
PRC on test generated data is 0.639

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.702
PRC on test generated data is 0.644

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.726
PRC on test generated data is 0.685

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.682
PRC on test generated data is 0.630

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.693
PRC on test generated data is 0.638

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.690
PRC on test generated data is 0.636

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.716
PRC on test generated data is 0.655

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.682
PRC on test generated data is 0.638

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.725
PRC on test generated data is 0.668

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.709
PRC on test generated data is 0.651

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.699
PRC on test generated data is 0.645

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.699
PRC on test generated data is 0.649
----------------------------------------
roc mean across methods is 0.701
prc mean across methods is 0.648


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48503386 0.51496614] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48490902 0.51509098]
before perturbation, mean and variance of data mean embedding are 0.003753 and 0.040616 
after perturbation, mean and variance of data mean embedding are 0.003765 and 0.040736 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.654
PRC on test generated data is 0.604

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.631
PRC on test generated data is 0.581

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.734
PRC on test generated data is 0.675

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.656
PRC on test generated data is 0.605

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.660
PRC on test generated data is 0.628

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.682
PRC on test generated data is 0.623

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.750
PRC on test generated data is 0.697

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.719
PRC on test generated data is 0.677

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.705
PRC on test generated data is 0.658

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.733
PRC on test generated data is 0.686

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.667
PRC on test generated data is 0.616

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.688
PRC on test generated data is 0.645
----------------------------------------
roc mean across methods is 0.690
prc mean across methods is 0.641


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.3
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.3_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.48532518 0.51467482] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.48531044 0.51468956]
before perturbation, mean and variance of data mean embedding are 0.003724 and 0.040608 
after perturbation, mean and variance of data mean embedding are 0.003823 and 0.040737 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.608
PRC on test generated data is 0.573

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.642
PRC on test generated data is 0.593

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.698
PRC on test generated data is 0.640

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.597
PRC on test generated data is 0.565

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.695
PRC on test generated data is 0.647

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.637
PRC on test generated data is 0.593

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.713
PRC on test generated data is 0.662

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.663
PRC on test generated data is 0.624

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.685
PRC on test generated data is 0.640

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.684
PRC on test generated data is 0.633

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.668
PRC on test generated data is 0.623

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.687
PRC on test generated data is 0.638
----------------------------------------
roc mean across methods is 0.665
prc mean across methods is 0.619


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.65634495 0.65999957 0.71646449 0.64803452 0.68874319 0.66379696
 0.71925876 0.68847594 0.71097047 0.70079805 0.67648212 0.69530793]
Average PRC each method:  [0.60541229 0.60647159 0.65928208 0.59906309 0.63768949 0.610248
 0.66203732 0.63975817 0.65602703 0.64450059 0.6247532  0.64187811]
Std ROC each method:  [0.02788251 0.04815126 0.01259958 0.02811226 0.01465393 0.01990539
 0.01632104 0.01976199 0.01712863 0.01854643 0.02534854 0.00661358]
Std PRC each method:  [0.02072929 0.04029895 0.01811932 0.02126921 0.00610171 0.01639139
 0.01852777 0.02027152 0.01188133 0.02277172 0.01789204 0.0044158 ]
Average over repetitions across all methods
Average ROC:  0.6853897480170539
Average PRC:  0.6322600799590304
Std ROC:  0.011861631496676866
Variance PRC:  0.01088429223493195 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 100, 'subsampled_rate': 0.4} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55527701 0.44472299] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55556472 0.44443528]
before perturbation, mean and variance of data mean embedding are 0.003653 and 0.040719 
after perturbation, mean and variance of data mean embedding are 0.003575 and 0.040818 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.670
PRC on test generated data is 0.529

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.544
PRC on test generated data is 0.443

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.724
PRC on test generated data is 0.593

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.683
PRC on test generated data is 0.541

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.701
PRC on test generated data is 0.560

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.662
PRC on test generated data is 0.523

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.710
PRC on test generated data is 0.565

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.703
PRC on test generated data is 0.558

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.722
PRC on test generated data is 0.583

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.704
PRC on test generated data is 0.558

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.672
PRC on test generated data is 0.535

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.696
PRC on test generated data is 0.561
----------------------------------------
roc mean across methods is 0.682
prc mean across methods is 0.546


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55602908 0.44397092] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55524232 0.44475768]
before perturbation, mean and variance of data mean embedding are 0.003663 and 0.040607 
after perturbation, mean and variance of data mean embedding are 0.003569 and 0.040776 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.654
PRC on test generated data is 0.523

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.533
PRC on test generated data is 0.444

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.724
PRC on test generated data is 0.600

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.646
PRC on test generated data is 0.520

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.695
PRC on test generated data is 0.581

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.634
PRC on test generated data is 0.512

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.717
PRC on test generated data is 0.602

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.714
PRC on test generated data is 0.594

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.720
PRC on test generated data is 0.587

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.721
PRC on test generated data is 0.598

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.707
PRC on test generated data is 0.579

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.719
PRC on test generated data is 0.598
----------------------------------------
roc mean across methods is 0.682
prc mean across methods is 0.562


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55715718 0.44284282] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55689933 0.44310067]
before perturbation, mean and variance of data mean embedding are 0.003650 and 0.040610 
after perturbation, mean and variance of data mean embedding are 0.003572 and 0.040682 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.689
PRC on test generated data is 0.563

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.687
PRC on test generated data is 0.558

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.754
PRC on test generated data is 0.640

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.679
PRC on test generated data is 0.557

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.709
PRC on test generated data is 0.584

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.690
PRC on test generated data is 0.565

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.738
PRC on test generated data is 0.607

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.742
PRC on test generated data is 0.617

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.734
PRC on test generated data is 0.604

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.748
PRC on test generated data is 0.615

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.710
PRC on test generated data is 0.591

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.703
PRC on test generated data is 0.585
----------------------------------------
roc mean across methods is 0.715
prc mean across methods is 0.590


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55872399 0.44127601] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55944601 0.44055399]
before perturbation, mean and variance of data mean embedding are 0.003616 and 0.040590 
after perturbation, mean and variance of data mean embedding are 0.003626 and 0.040678 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.666
PRC on test generated data is 0.560

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.530
PRC on test generated data is 0.467

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.738
PRC on test generated data is 0.638

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.622
PRC on test generated data is 0.529

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.715
PRC on test generated data is 0.614

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.659
PRC on test generated data is 0.556

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.719
PRC on test generated data is 0.620

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.708
PRC on test generated data is 0.610

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.717
PRC on test generated data is 0.617

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.706
PRC on test generated data is 0.609

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.675
PRC on test generated data is 0.573

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.718
PRC on test generated data is 0.618
----------------------------------------
roc mean across methods is 0.681
prc mean across methods is 0.584


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.55696917 0.44303083] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.55674368 0.44325632]
before perturbation, mean and variance of data mean embedding are 0.003678 and 0.040577 
after perturbation, mean and variance of data mean embedding are 0.003763 and 0.040677 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.614
PRC on test generated data is 0.507

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.435

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.686
PRC on test generated data is 0.574

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.609
PRC on test generated data is 0.504

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.630
PRC on test generated data is 0.514

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.617
PRC on test generated data is 0.511

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.667
PRC on test generated data is 0.549

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.647
PRC on test generated data is 0.531

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.638
PRC on test generated data is 0.524

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.659
PRC on test generated data is 0.541

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.639
PRC on test generated data is 0.534

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.620
PRC on test generated data is 0.509
----------------------------------------
roc mean across methods is 0.627
prc mean across methods is 0.519


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.65860505 0.55878907 0.72525415 0.64765081 0.69019562 0.65248575
 0.71035254 0.70262137 0.7060018  0.70765069 0.68044556 0.69122005]
Average PRC each method:  [0.53651411 0.46924406 0.60890429 0.53015396 0.57088289 0.53323789
 0.588464   0.58204843 0.58292829 0.58425739 0.56243833 0.57430644]
Std ROC each method:  [0.02502808 0.06593061 0.02242539 0.02965335 0.03079278 0.02511101
 0.0236691  0.03106208 0.03477901 0.02877083 0.02622342 0.03651947]
Std PRC each method:  [0.02144408 0.04555701 0.02613868 0.01803797 0.03308353 0.02263795
 0.02700346 0.03278971 0.0319869  0.0294105  0.02331442 0.03765429]
Average over repetitions across all methods
Average ROC:  0.6776060385589797
Average PRC:  0.5602816739624709
Std ROC:  0.02837633968537765
Variance PRC:  0.025961902430724732 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 100, 'subsampled_rate': 0.5} 


Repetition:  0
 • seed                     - 0
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61144114 0.38855886] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.6122202 0.3877798]
before perturbation, mean and variance of data mean embedding are 0.003635 and 0.041477 
after perturbation, mean and variance of data mean embedding are 0.003567 and 0.041544 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.656
PRC on test generated data is 0.482

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.550
PRC on test generated data is 0.410

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.721
PRC on test generated data is 0.555

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.673
PRC on test generated data is 0.497

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.662
PRC on test generated data is 0.494

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.652
PRC on test generated data is 0.480

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.718
PRC on test generated data is 0.553

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.706
PRC on test generated data is 0.544

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.725
PRC on test generated data is 0.555

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.706
PRC on test generated data is 0.531

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.684
PRC on test generated data is 0.514

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.689
PRC on test generated data is 0.519
----------------------------------------
roc mean across methods is 0.679
prc mean across methods is 0.511


Repetition:  1
 • seed                     - 1
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.60962596 0.39037404] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.60911136 0.39088864]
before perturbation, mean and variance of data mean embedding are 0.003649 and 0.041300 
after perturbation, mean and variance of data mean embedding are 0.003567 and 0.041433 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.677
PRC on test generated data is 0.483

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.655
PRC on test generated data is 0.463

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.748
PRC on test generated data is 0.561

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.700
PRC on test generated data is 0.505

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.719
PRC on test generated data is 0.524

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.646
PRC on test generated data is 0.461

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.714
PRC on test generated data is 0.519

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.655
PRC on test generated data is 0.475

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.713
PRC on test generated data is 0.515

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.709
PRC on test generated data is 0.523

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.693
PRC on test generated data is 0.505

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.728
PRC on test generated data is 0.531
----------------------------------------
roc mean across methods is 0.696
prc mean across methods is 0.505


Repetition:  2
 • seed                     - 2
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61034103 0.38965897] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61004369 0.38995631]
before perturbation, mean and variance of data mean embedding are 0.003630 and 0.041187 
after perturbation, mean and variance of data mean embedding are 0.003562 and 0.041237 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.655
PRC on test generated data is 0.471

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.667
PRC on test generated data is 0.479

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.754
PRC on test generated data is 0.582

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.623
PRC on test generated data is 0.449

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.730
PRC on test generated data is 0.555

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.649
PRC on test generated data is 0.468

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.743
PRC on test generated data is 0.565

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.716
PRC on test generated data is 0.547

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.738
PRC on test generated data is 0.570

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.733
PRC on test generated data is 0.549

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.693
PRC on test generated data is 0.514

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.719
PRC on test generated data is 0.545
----------------------------------------
roc mean across methods is 0.702
prc mean across methods is 0.525


Repetition:  3
 • seed                     - 3
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.6119912 0.3880088] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.61237069 0.38762931]
before perturbation, mean and variance of data mean embedding are 0.003736 and 0.041583 
after perturbation, mean and variance of data mean embedding are 0.003745 and 0.041654 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.621
PRC on test generated data is 0.463

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.660
PRC on test generated data is 0.488

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.739
PRC on test generated data is 0.581

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.584
PRC on test generated data is 0.440

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.681
PRC on test generated data is 0.528

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.574
PRC on test generated data is 0.432

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.708
PRC on test generated data is 0.547

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.688
PRC on test generated data is 0.536

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.691
PRC on test generated data is 0.540

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.694
PRC on test generated data is 0.543

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.656
PRC on test generated data is 0.492

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.642
PRC on test generated data is 0.500
----------------------------------------
roc mean across methods is 0.661
prc mean across methods is 0.508


Repetition:  4
 • seed                     - 4
 • data_name                - adult
 • batch_rate               - 0.1
 • epochs                   - 100
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.5
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - adult_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/adult_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=100_undersam_rate=0.5_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is adult
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.61265127 0.38734873] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.6127983 0.3872017]
before perturbation, mean and variance of data mean embedding are 0.003671 and 0.041328 
after perturbation, mean and variance of data mean embedding are 0.003745 and 0.041413 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.680
PRC on test generated data is 0.515

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.576
PRC on test generated data is 0.436

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.731
PRC on test generated data is 0.599

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.687
PRC on test generated data is 0.521

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.633
PRC on test generated data is 0.498

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.690
PRC on test generated data is 0.524

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.751
PRC on test generated data is 0.583

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.630
PRC on test generated data is 0.489

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.638
PRC on test generated data is 0.504

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.743
PRC on test generated data is 0.575

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.686
PRC on test generated data is 0.528

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.623
PRC on test generated data is 0.496
----------------------------------------
roc mean across methods is 0.672
prc mean across methods is 0.522


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.65778316 0.62157738 0.73844859 0.65342321 0.68496808 0.64222439
 0.72683244 0.67933374 0.70108254 0.71704922 0.68251963 0.68005421]
Average PRC each method:  [0.48313485 0.455259   0.57563357 0.48249642 0.51988754 0.47303625
 0.55340717 0.51836975 0.536719   0.54415544 0.51062588 0.51824846]
Std ROC each method:  [0.02122691 0.04874154 0.011661   0.04340543 0.03583714 0.03772689
 0.01706851 0.03205297 0.03504192 0.01804077 0.01383695 0.04146854]
Std PRC each method:  [0.01773214 0.029024   0.01567744 0.03212796 0.02239678 0.02989249
 0.02131998 0.02999862 0.02441801 0.017757   0.01180241 0.01858393]
Average over repetitions across all methods
Average ROC:  0.6821080490837848
Average PRC:  0.5142477785329873
Std ROC:  0.014967355430692901
Variance PRC:  0.007784856180356795 


 -------------------------------------------------------------------------------- 





 ******************************
adult
Max ROC!  0.6865667866692717
Max PRC!  0.6329441470415623
Setup:  {'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 100, 'order_hermite': 20, 'subsampled_rate': 0.3}
****************************************************************************************************



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 10, 'subsampled_rate': 0.2} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75145553 0.24854447] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75184651 0.24815349]
before perturbation, mean and variance of data mean embedding are 0.047635 and 0.127839 
after perturbation, mean and variance of data mean embedding are 0.047572 and 0.127864 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.690
PRC on test generated data is 0.388

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.778
PRC on test generated data is 0.484

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.421

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.574
PRC on test generated data is 0.315

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.760
PRC on test generated data is 0.451

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.733
PRC on test generated data is 0.419

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.803
PRC on test generated data is 0.500

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.755
PRC on test generated data is 0.433

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.794
PRC on test generated data is 0.473

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.779
PRC on test generated data is 0.461

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.710
PRC on test generated data is 0.458

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.802
PRC on test generated data is 0.478
----------------------------------------
roc mean across methods is 0.745
prc mean across methods is 0.440


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75371411 0.24628589] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75392203 0.24607797]
before perturbation, mean and variance of data mean embedding are 0.047722 and 0.128952 
after perturbation, mean and variance of data mean embedding are 0.047659 and 0.129042 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.689
PRC on test generated data is 0.439

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.780
PRC on test generated data is 0.487

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.762
PRC on test generated data is 0.432

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.597
PRC on test generated data is 0.352

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.732
PRC on test generated data is 0.429

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.668
PRC on test generated data is 0.428

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.787
PRC on test generated data is 0.478

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.752
PRC on test generated data is 0.432

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.785
PRC on test generated data is 0.477

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.780
PRC on test generated data is 0.489

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.736
PRC on test generated data is 0.474

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.788
PRC on test generated data is 0.475
----------------------------------------
roc mean across methods is 0.738
prc mean across methods is 0.449


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75183196 0.24816804] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75193282 0.24806718]
before perturbation, mean and variance of data mean embedding are 0.047731 and 0.127816 
after perturbation, mean and variance of data mean embedding are 0.047640 and 0.127929 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.651
PRC on test generated data is 0.361

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.767
PRC on test generated data is 0.455

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.769
PRC on test generated data is 0.432

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.555
PRC on test generated data is 0.294

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.753
PRC on test generated data is 0.449

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.688
PRC on test generated data is 0.401

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.802
PRC on test generated data is 0.479

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.765
PRC on test generated data is 0.467

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.795
PRC on test generated data is 0.490

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.779
PRC on test generated data is 0.479

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.701
PRC on test generated data is 0.442

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.778
PRC on test generated data is 0.486
----------------------------------------
roc mean across methods is 0.734
prc mean across methods is 0.436


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75331259 0.24668741] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75360849 0.24639151]
before perturbation, mean and variance of data mean embedding are 0.047871 and 0.128523 
after perturbation, mean and variance of data mean embedding are 0.047829 and 0.128404 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.636
PRC on test generated data is 0.361

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.782
PRC on test generated data is 0.480

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.757
PRC on test generated data is 0.424

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.538
PRC on test generated data is 0.281

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.748
PRC on test generated data is 0.432

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.673
PRC on test generated data is 0.410

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.781
PRC on test generated data is 0.459

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.744
PRC on test generated data is 0.423

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.767
PRC on test generated data is 0.446

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.756
PRC on test generated data is 0.450

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.615
PRC on test generated data is 0.335

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.760
PRC on test generated data is 0.447
----------------------------------------
roc mean across methods is 0.713
prc mean across methods is 0.412


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75120458 0.24879542] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75114457 0.24885543]
before perturbation, mean and variance of data mean embedding are 0.047970 and 0.128740 
after perturbation, mean and variance of data mean embedding are 0.048020 and 0.128743 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.703
PRC on test generated data is 0.393

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.444

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.752
PRC on test generated data is 0.407

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.566
PRC on test generated data is 0.306

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.423

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.683
PRC on test generated data is 0.381

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.784
PRC on test generated data is 0.449

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.767
PRC on test generated data is 0.430

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.780
PRC on test generated data is 0.449

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.785
PRC on test generated data is 0.452

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.652
PRC on test generated data is 0.367

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.783
PRC on test generated data is 0.453
----------------------------------------
roc mean across methods is 0.732
prc mean across methods is 0.413


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.67376475 0.77394728 0.76062846 0.5659089  0.75137879 0.68876091
 0.79126736 0.75683401 0.78427123 0.77580807 0.68279076 0.78225424]
Average PRC each method:  [0.38843529 0.46979586 0.42332746 0.30937169 0.43702168 0.40782833
 0.47281593 0.43684813 0.46702162 0.4660565  0.41510211 0.46782547]
Std ROC each method:  [0.02544106 0.00761064 0.0057156  0.01955264 0.01108124 0.02309246
 0.00937299 0.0085203  0.01020048 0.01003471 0.04319661 0.01378365]
Std PRC each method:  [0.02866698 0.01725833 0.00916139 0.0241373  0.01106934 0.01629482
 0.01767477 0.01533337 0.017227   0.01535454 0.05423437 0.01510134]
Average over repetitions across all methods
Average ROC:  0.732301230800339
Average PRC:  0.43012083739763296
Std ROC:  0.010652718778708721
Variance PRC:  0.015002043316729854 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 10, 'subsampled_rate': 0.4} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85755839 0.14244161] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85757801 0.14242199]
before perturbation, mean and variance of data mean embedding are 0.047669 and 0.143192 
after perturbation, mean and variance of data mean embedding are 0.047633 and 0.143210 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.667
PRC on test generated data is 0.239

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.757
PRC on test generated data is 0.343

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.778
PRC on test generated data is 0.286

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.504
PRC on test generated data is 0.141

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.300

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.733
PRC on test generated data is 0.286

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.795
PRC on test generated data is 0.301

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.786
PRC on test generated data is 0.335

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.797
PRC on test generated data is 0.316

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.781
PRC on test generated data is 0.316

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.703
PRC on test generated data is 0.283

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.788
PRC on test generated data is 0.334
----------------------------------------
roc mean across methods is 0.738
prc mean across methods is 0.290


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85816019 0.14183981] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85813243 0.14186757]
before perturbation, mean and variance of data mean embedding are 0.047338 and 0.142598 
after perturbation, mean and variance of data mean embedding are 0.047303 and 0.142644 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.642
PRC on test generated data is 0.242

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.778
PRC on test generated data is 0.318

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.766
PRC on test generated data is 0.274

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.555
PRC on test generated data is 0.175

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.761
PRC on test generated data is 0.300

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.632
PRC on test generated data is 0.278

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.788
PRC on test generated data is 0.303

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.772
PRC on test generated data is 0.285

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.796
PRC on test generated data is 0.319

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.800
PRC on test generated data is 0.332

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.689
PRC on test generated data is 0.277

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.800
PRC on test generated data is 0.330
----------------------------------------
roc mean across methods is 0.732
prc mean across methods is 0.286


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85748675 0.14251325] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85764175 0.14235825]
before perturbation, mean and variance of data mean embedding are 0.047856 and 0.142991 
after perturbation, mean and variance of data mean embedding are 0.047803 and 0.143054 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.606
PRC on test generated data is 0.218

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.777
PRC on test generated data is 0.318

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.764
PRC on test generated data is 0.264

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.529
PRC on test generated data is 0.152

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.726
PRC on test generated data is 0.279

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.707
PRC on test generated data is 0.279

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.791
PRC on test generated data is 0.298

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.783
PRC on test generated data is 0.319

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.809
PRC on test generated data is 0.336

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.792
PRC on test generated data is 0.299

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.614
PRC on test generated data is 0.221

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.787
PRC on test generated data is 0.322
----------------------------------------
roc mean across methods is 0.724
prc mean across methods is 0.276


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85880499 0.14119501] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.8586966 0.1413034]
before perturbation, mean and variance of data mean embedding are 0.046930 and 0.140966 
after perturbation, mean and variance of data mean embedding are 0.046906 and 0.140892 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.717
PRC on test generated data is 0.266

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.770
PRC on test generated data is 0.300

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.775
PRC on test generated data is 0.285

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.596
PRC on test generated data is 0.203

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.742
PRC on test generated data is 0.272

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.671
PRC on test generated data is 0.277

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.793
PRC on test generated data is 0.310

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.752
PRC on test generated data is 0.277

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.773
PRC on test generated data is 0.319

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.763
PRC on test generated data is 0.307

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.642
PRC on test generated data is 0.232

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.779
PRC on test generated data is 0.306
----------------------------------------
roc mean across methods is 0.731
prc mean across methods is 0.280


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85869036 0.14130964] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.8585955 0.1414045]
before perturbation, mean and variance of data mean embedding are 0.047303 and 0.143220 
after perturbation, mean and variance of data mean embedding are 0.047331 and 0.143203 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.683
PRC on test generated data is 0.238

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.773
PRC on test generated data is 0.323

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.761
PRC on test generated data is 0.269

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.523
PRC on test generated data is 0.157

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.784
PRC on test generated data is 0.302

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.699
PRC on test generated data is 0.281

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.796
PRC on test generated data is 0.316

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.785
PRC on test generated data is 0.314

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.788
PRC on test generated data is 0.305

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.792
PRC on test generated data is 0.328

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.614
PRC on test generated data is 0.220

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.804
PRC on test generated data is 0.341
----------------------------------------
roc mean across methods is 0.734
prc mean across methods is 0.283


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.66327688 0.77102688 0.76868339 0.54144483 0.75598052 0.68848421
 0.79260315 0.77545258 0.79236833 0.78572842 0.65268964 0.79145054]
Average PRC each method:  [0.240574   0.32022781 0.27566194 0.1657039  0.29066055 0.28035236
 0.30573317 0.30593562 0.31891023 0.31634623 0.24663508 0.32643134]
Std ROC each method:  [0.0375595  0.00762801 0.00645913 0.03179996 0.0200648  0.03435993
 0.00299021 0.01294732 0.01185925 0.0125969  0.03743263 0.00903679]
Std PRC each method:  [0.01511319 0.01393922 0.00865499 0.02163246 0.01241852 0.00322474
 0.0062631  0.02174207 0.00986147 0.01248732 0.02743781 0.01200465]
Average over repetitions across all methods
Average ROC:  0.7315991141189325
Average PRC:  0.2827643522967692
Std ROC:  0.004612306796383573
Variance PRC:  0.0049945743998651955 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 10, 'subsampled_rate': 0.6} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9011952 0.0988048] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90122388 0.09877612]
before perturbation, mean and variance of data mean embedding are 0.047103 and 0.149372 
after perturbation, mean and variance of data mean embedding are 0.047078 and 0.149385 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.687
PRC on test generated data is 0.189

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.779
PRC on test generated data is 0.286

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.761
PRC on test generated data is 0.202

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.554
PRC on test generated data is 0.130

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.778
PRC on test generated data is 0.219

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.644
PRC on test generated data is 0.246

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.779
PRC on test generated data is 0.221

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.772
PRC on test generated data is 0.214

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.785
PRC on test generated data is 0.226

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.774
PRC on test generated data is 0.223

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.671
PRC on test generated data is 0.216

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.779
PRC on test generated data is 0.226
----------------------------------------
roc mean across methods is 0.730
prc mean across methods is 0.216


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9007841 0.0992159] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.9008445 0.0991555]
before perturbation, mean and variance of data mean embedding are 0.046713 and 0.149107 
after perturbation, mean and variance of data mean embedding are 0.046688 and 0.149140 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.646
PRC on test generated data is 0.170

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.770
PRC on test generated data is 0.276

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.198

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.588
PRC on test generated data is 0.137

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.732
PRC on test generated data is 0.184

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.649
PRC on test generated data is 0.210

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.769
PRC on test generated data is 0.208

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.739
PRC on test generated data is 0.202

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.205

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.772
PRC on test generated data is 0.222

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.759
PRC on test generated data is 0.197

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.762
PRC on test generated data is 0.206
----------------------------------------
roc mean across methods is 0.726
prc mean across methods is 0.201


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90027273 0.09972727] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.900301 0.099699]
before perturbation, mean and variance of data mean embedding are 0.047214 and 0.148657 
after perturbation, mean and variance of data mean embedding are 0.047178 and 0.148697 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.676
PRC on test generated data is 0.163

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.196

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.759
PRC on test generated data is 0.191

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.536
PRC on test generated data is 0.109

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.760
PRC on test generated data is 0.229

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.645
PRC on test generated data is 0.179

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.789
PRC on test generated data is 0.232

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.766
PRC on test generated data is 0.206

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.783
PRC on test generated data is 0.225

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.770
PRC on test generated data is 0.239

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.621
PRC on test generated data is 0.173

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.797
PRC on test generated data is 0.243
----------------------------------------
roc mean across methods is 0.722
prc mean across methods is 0.199


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90148598 0.09851402] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90147853 0.09852147]
before perturbation, mean and variance of data mean embedding are 0.046886 and 0.147676 
after perturbation, mean and variance of data mean embedding are 0.046869 and 0.147621 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.604
PRC on test generated data is 0.172

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.767
PRC on test generated data is 0.264

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.765
PRC on test generated data is 0.207

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.530
PRC on test generated data is 0.112

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.747
PRC on test generated data is 0.201

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.654
PRC on test generated data is 0.207

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.759
PRC on test generated data is 0.219

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.752
PRC on test generated data is 0.205

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.780
PRC on test generated data is 0.232

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.708
PRC on test generated data is 0.205

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.639
PRC on test generated data is 0.186

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.761
PRC on test generated data is 0.212
----------------------------------------
roc mean across methods is 0.705
prc mean across methods is 0.202


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90060362 0.09939638] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90051496 0.09948504]
before perturbation, mean and variance of data mean embedding are 0.046875 and 0.149021 
after perturbation, mean and variance of data mean embedding are 0.046894 and 0.149007 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.677
PRC on test generated data is 0.175

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.758
PRC on test generated data is 0.226

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.764
PRC on test generated data is 0.197

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.545
PRC on test generated data is 0.125

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.770
PRC on test generated data is 0.212

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.651
PRC on test generated data is 0.227

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.775
PRC on test generated data is 0.213

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.780
PRC on test generated data is 0.227

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.798
PRC on test generated data is 0.256

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.796
PRC on test generated data is 0.257

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.654
PRC on test generated data is 0.180

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.796
PRC on test generated data is 0.254
----------------------------------------
roc mean across methods is 0.730
prc mean across methods is 0.212


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.65789921 0.76828755 0.76223942 0.55057237 0.75747447 0.64861873
 0.77439524 0.7618586  0.78167585 0.76390947 0.66872643 0.77905873]
Average PRC each method:  [0.17382847 0.24959047 0.19899463 0.1225258  0.20929688 0.21377345
 0.21860557 0.21094976 0.22898891 0.22907724 0.19044842 0.22828821]
Std ROC each method:  [0.03011414 0.00661865 0.00217005 0.02042003 0.0162658  0.00361004
 0.00995694 0.01470656 0.0113135  0.02931103 0.04811907 0.01561105]
Std PRC each method:  [0.0083798  0.03372915 0.00519129 0.01053745 0.01546366 0.02233331
 0.00799326 0.00874264 0.0162692  0.01762631 0.01492213 0.01829354]
Average over repetitions across all methods
Average ROC:  0.7228930063029583
Average PRC:  0.20619731786879042
Std ROC:  0.0091887924981925
Variance PRC:  0.0069509292535996576 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 20, 'subsampled_rate': 0.2} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75145553 0.24854447] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75155545 0.24844455]
before perturbation, mean and variance of data mean embedding are 0.027572 and 0.096948 
after perturbation, mean and variance of data mean embedding are 0.027514 and 0.096916 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.668
PRC on test generated data is 0.364

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.766
PRC on test generated data is 0.448

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.750
PRC on test generated data is 0.406

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.588
PRC on test generated data is 0.308

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.777
PRC on test generated data is 0.446

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.737
PRC on test generated data is 0.406

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.784
PRC on test generated data is 0.446

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.780
PRC on test generated data is 0.456

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.794
PRC on test generated data is 0.471

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.800
PRC on test generated data is 0.484

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.642
PRC on test generated data is 0.339

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.787
PRC on test generated data is 0.468
----------------------------------------
roc mean across methods is 0.739
prc mean across methods is 0.420


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75371411 0.24628589] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75363338 0.24636662]
before perturbation, mean and variance of data mean embedding are 0.027227 and 0.096628 
after perturbation, mean and variance of data mean embedding are 0.027178 and 0.096668 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.642
PRC on test generated data is 0.376

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.775
PRC on test generated data is 0.487

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.758
PRC on test generated data is 0.427

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.621
PRC on test generated data is 0.334

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.733
PRC on test generated data is 0.414

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.709
PRC on test generated data is 0.411

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.773
PRC on test generated data is 0.445

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.736
PRC on test generated data is 0.407

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.792
PRC on test generated data is 0.473

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.761
PRC on test generated data is 0.428

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.657
PRC on test generated data is 0.362

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.738
PRC on test generated data is 0.405
----------------------------------------
roc mean across methods is 0.725
prc mean across methods is 0.414


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75183196 0.24816804] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75176842 0.24823158]
before perturbation, mean and variance of data mean embedding are 0.027576 and 0.097418 
after perturbation, mean and variance of data mean embedding are 0.027526 and 0.097433 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.656
PRC on test generated data is 0.355

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.774
PRC on test generated data is 0.463

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.771
PRC on test generated data is 0.434

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.551
PRC on test generated data is 0.291

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.770
PRC on test generated data is 0.458

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.691
PRC on test generated data is 0.398

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.775
PRC on test generated data is 0.442

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.759
PRC on test generated data is 0.415

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.793
PRC on test generated data is 0.483

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.772
PRC on test generated data is 0.435

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.721
PRC on test generated data is 0.408

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.769
PRC on test generated data is 0.431
----------------------------------------
roc mean across methods is 0.734
prc mean across methods is 0.418


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75331259 0.24668741] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75343643 0.24656357]
before perturbation, mean and variance of data mean embedding are 0.027419 and 0.096566 
after perturbation, mean and variance of data mean embedding are 0.027384 and 0.096616 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.651
PRC on test generated data is 0.344

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.668
PRC on test generated data is 0.356

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.755
PRC on test generated data is 0.432

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.638
PRC on test generated data is 0.341

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.731
PRC on test generated data is 0.427

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.618
PRC on test generated data is 0.330

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.785
PRC on test generated data is 0.480

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.720
PRC on test generated data is 0.421

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.775
PRC on test generated data is 0.471

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.769
PRC on test generated data is 0.454

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.668
PRC on test generated data is 0.353

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.785
PRC on test generated data is 0.486
----------------------------------------
roc mean across methods is 0.714
prc mean across methods is 0.408


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75120458 0.24879542] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.7512622 0.2487378]
before perturbation, mean and variance of data mean embedding are 0.027501 and 0.095855 
after perturbation, mean and variance of data mean embedding are 0.027542 and 0.095836 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.643
PRC on test generated data is 0.368

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.772
PRC on test generated data is 0.485

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.765
PRC on test generated data is 0.422

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.537
PRC on test generated data is 0.270

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.749
PRC on test generated data is 0.439

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.656
PRC on test generated data is 0.390

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.796
PRC on test generated data is 0.488

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.770
PRC on test generated data is 0.465

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.798
PRC on test generated data is 0.481

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.775
PRC on test generated data is 0.467

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.673
PRC on test generated data is 0.386

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.771
PRC on test generated data is 0.481
----------------------------------------
roc mean across methods is 0.725
prc mean across methods is 0.429


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.65229085 0.75078448 0.7598058  0.58694346 0.75190694 0.68220183
 0.78268985 0.75310375 0.79026102 0.77548855 0.67238534 0.76993738]
Average PRC each method:  [0.36127964 0.44779521 0.42426878 0.30865975 0.43710064 0.38727315
 0.46034684 0.43290611 0.4756994  0.45360582 0.36963398 0.45420006]
Std ROC each method:  [0.00955992 0.04176241 0.00754098 0.0390114  0.01874316 0.04147737
 0.00802144 0.02221187 0.00793908 0.01316622 0.02669325 0.01746875]
Std PRC each method:  [0.01111154 0.0481663  0.00989523 0.02628725 0.01510128 0.02936059
 0.01958416 0.02318774 0.00516167 0.02032286 0.02450014 0.03123638]
Average over repetitions across all methods
Average ROC:  0.7273166041244867
Average PRC:  0.4177307808269535
Std ROC:  0.008798839947401037
Variance PRC:  0.0067556397272299975 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 20, 'subsampled_rate': 0.4} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85755839 0.14244161] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85761658 0.14238342]
before perturbation, mean and variance of data mean embedding are 0.027024 and 0.106871 
after perturbation, mean and variance of data mean embedding are 0.026991 and 0.106838 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.666
PRC on test generated data is 0.224

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.772
PRC on test generated data is 0.297

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.758
PRC on test generated data is 0.260

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.530
PRC on test generated data is 0.151

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.761
PRC on test generated data is 0.273

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.712
PRC on test generated data is 0.278

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.792
PRC on test generated data is 0.294

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.757
PRC on test generated data is 0.262

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.799
PRC on test generated data is 0.307

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.797
PRC on test generated data is 0.313

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.640
PRC on test generated data is 0.214

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.788
PRC on test generated data is 0.309
----------------------------------------
roc mean across methods is 0.731
prc mean across methods is 0.265


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85816019 0.14183981] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85816452 0.14183548]
before perturbation, mean and variance of data mean embedding are 0.026968 and 0.106612 
after perturbation, mean and variance of data mean embedding are 0.026940 and 0.106637 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.649
PRC on test generated data is 0.247

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.783
PRC on test generated data is 0.333

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.269

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.570
PRC on test generated data is 0.182

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.750
PRC on test generated data is 0.298

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.666
PRC on test generated data is 0.291

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.797
PRC on test generated data is 0.315

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.761
PRC on test generated data is 0.303

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.785
PRC on test generated data is 0.316

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.792
PRC on test generated data is 0.336

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.645
PRC on test generated data is 0.230

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.790
PRC on test generated data is 0.326
----------------------------------------
roc mean across methods is 0.729
prc mean across methods is 0.287


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85748675 0.14251325] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85754607 0.14245393]
before perturbation, mean and variance of data mean embedding are 0.027385 and 0.107478 
after perturbation, mean and variance of data mean embedding are 0.027357 and 0.107490 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.650
PRC on test generated data is 0.222

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.773
PRC on test generated data is 0.318

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.759
PRC on test generated data is 0.260

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.545
PRC on test generated data is 0.164

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.756
PRC on test generated data is 0.306

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.723
PRC on test generated data is 0.283

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.792
PRC on test generated data is 0.308

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.765
PRC on test generated data is 0.316

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.801
PRC on test generated data is 0.333

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.775
PRC on test generated data is 0.322

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.689
PRC on test generated data is 0.292

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.794
PRC on test generated data is 0.332
----------------------------------------
roc mean across methods is 0.735
prc mean across methods is 0.288


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85880499 0.14119501] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85905933 0.14094067]
before perturbation, mean and variance of data mean embedding are 0.026874 and 0.106597 
after perturbation, mean and variance of data mean embedding are 0.026854 and 0.106602 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.708
PRC on test generated data is 0.251

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.304

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.772
PRC on test generated data is 0.284

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.517
PRC on test generated data is 0.151

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.738
PRC on test generated data is 0.254

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.698
PRC on test generated data is 0.242

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.768
PRC on test generated data is 0.286

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.749
PRC on test generated data is 0.270

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.285

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.771
PRC on test generated data is 0.292

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.693
PRC on test generated data is 0.252

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.765
PRC on test generated data is 0.279
----------------------------------------
roc mean across methods is 0.726
prc mean across methods is 0.262


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85869036 0.14130964] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85863096 0.14136904]
before perturbation, mean and variance of data mean embedding are 0.027000 and 0.106621 
after perturbation, mean and variance of data mean embedding are 0.027022 and 0.106603 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.617
PRC on test generated data is 0.235

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.775
PRC on test generated data is 0.333

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.277

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.144

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.770
PRC on test generated data is 0.296

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.754
PRC on test generated data is 0.284

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.810
PRC on test generated data is 0.331

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.777
PRC on test generated data is 0.299

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.785
PRC on test generated data is 0.302

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.793
PRC on test generated data is 0.330

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.592
PRC on test generated data is 0.208

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.799
PRC on test generated data is 0.329
----------------------------------------
roc mean across methods is 0.728
prc mean across methods is 0.281


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.65785738 0.77421914 0.76414217 0.53237151 0.75483143 0.71063401
 0.79181192 0.76175832 0.78780025 0.7857405  0.65168265 0.78722554]
Average PRC each method:  [0.23570924 0.3171275  0.27011705 0.15856309 0.28535605 0.27540381
 0.30685537 0.28987073 0.30855584 0.31878083 0.23925468 0.31517194]
Std ROC each method:  [0.02947199 0.00489338 0.00520575 0.02404589 0.01088247 0.02878295
 0.01347009 0.00932236 0.01188186 0.01050505 0.03681289 0.01171939]
Std PRC each method:  [0.01167186 0.0146151  0.00956528 0.01333016 0.01921986 0.01744146
 0.01565676 0.02047596 0.01590324 0.01541792 0.03064829 0.01968157]
Average over repetitions across all methods
Average ROC:  0.7300062344957774
Average PRC:  0.27673051058201487
Std ROC:  0.002970747542140059
Variance PRC:  0.010812364750816452 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 20, 'subsampled_rate': 0.6} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9011952 0.0988048] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90116231 0.09883769]
before perturbation, mean and variance of data mean embedding are 0.026940 and 0.110807 
after perturbation, mean and variance of data mean embedding are 0.026917 and 0.110779 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.638
PRC on test generated data is 0.171

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.258

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.755
PRC on test generated data is 0.196

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.533
PRC on test generated data is 0.115

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.232

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.635
PRC on test generated data is 0.240

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.797
PRC on test generated data is 0.243

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.765
PRC on test generated data is 0.213

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.784
PRC on test generated data is 0.231

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.790
PRC on test generated data is 0.275

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.624
PRC on test generated data is 0.150

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.787
PRC on test generated data is 0.251
----------------------------------------
roc mean across methods is 0.720
prc mean across methods is 0.215


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9007841 0.0992159] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90076561 0.09923439]
before perturbation, mean and variance of data mean embedding are 0.026927 and 0.111315 
after perturbation, mean and variance of data mean embedding are 0.026907 and 0.111329 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.667
PRC on test generated data is 0.162

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.761
PRC on test generated data is 0.256

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.765
PRC on test generated data is 0.200

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.554
PRC on test generated data is 0.128

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.755
PRC on test generated data is 0.211

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.633
PRC on test generated data is 0.225

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.788
PRC on test generated data is 0.224

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.740
PRC on test generated data is 0.214

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.795
PRC on test generated data is 0.229

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.780
PRC on test generated data is 0.244

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.698
PRC on test generated data is 0.214

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.785
PRC on test generated data is 0.228
----------------------------------------
roc mean across methods is 0.727
prc mean across methods is 0.211


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90027273 0.09972727] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90025683 0.09974317]
before perturbation, mean and variance of data mean embedding are 0.027153 and 0.112509 
after perturbation, mean and variance of data mean embedding are 0.027133 and 0.112517 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.687
PRC on test generated data is 0.173

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.796
PRC on test generated data is 0.234

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.758
PRC on test generated data is 0.190

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.565
PRC on test generated data is 0.126

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.761
PRC on test generated data is 0.201

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.698
PRC on test generated data is 0.227

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.792
PRC on test generated data is 0.230

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.779
PRC on test generated data is 0.215

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.795
PRC on test generated data is 0.238

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.788
PRC on test generated data is 0.232

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.680
PRC on test generated data is 0.216

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.785
PRC on test generated data is 0.224
----------------------------------------
roc mean across methods is 0.740
prc mean across methods is 0.209


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90148598 0.09851402] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90155607 0.09844393]
before perturbation, mean and variance of data mean embedding are 0.027056 and 0.112150 
after perturbation, mean and variance of data mean embedding are 0.027042 and 0.112150 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.676
PRC on test generated data is 0.164

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.766
PRC on test generated data is 0.240

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.760
PRC on test generated data is 0.201

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.517
PRC on test generated data is 0.108

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.668
PRC on test generated data is 0.177

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.681
PRC on test generated data is 0.179

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.762
PRC on test generated data is 0.229

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.674
PRC on test generated data is 0.168

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.753
PRC on test generated data is 0.233

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.722
PRC on test generated data is 0.204

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.661
PRC on test generated data is 0.189

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.730
PRC on test generated data is 0.197
----------------------------------------
roc mean across methods is 0.698
prc mean across methods is 0.191


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90060362 0.09939638] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90067612 0.09932388]
before perturbation, mean and variance of data mean embedding are 0.026751 and 0.110647 
after perturbation, mean and variance of data mean embedding are 0.026767 and 0.110633 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.689
PRC on test generated data is 0.234

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.784
PRC on test generated data is 0.250

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.753
PRC on test generated data is 0.189

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.507
PRC on test generated data is 0.101

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.771
PRC on test generated data is 0.215

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.701
PRC on test generated data is 0.212

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.803
PRC on test generated data is 0.252

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.778
PRC on test generated data is 0.214

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.785
PRC on test generated data is 0.217

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.793
PRC on test generated data is 0.252

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.675
PRC on test generated data is 0.223

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.788
PRC on test generated data is 0.232
----------------------------------------
roc mean across methods is 0.735
prc mean across methods is 0.216


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.67141082 0.77494078 0.75810569 0.53504973 0.74369332 0.66979261
 0.78849064 0.74714661 0.78251976 0.77434671 0.66737486 0.77523913]
Average PRC each method:  [0.18081067 0.24758522 0.19529055 0.11537443 0.20741141 0.2168898
 0.23554455 0.20483508 0.22969281 0.24122867 0.19855249 0.22644887]
Std ROC each method:  [0.01822759 0.01297423 0.00431354 0.02188774 0.03805    0.02973511
 0.01394767 0.03920773 0.01547707 0.02666823 0.02469994 0.02247318]
Std PRC each method:  [0.02676976 0.0092097  0.00514941 0.01040918 0.0182368  0.0208129
 0.01060225 0.01859944 0.00693456 0.02329697 0.0266376  0.01747552]
Average over repetitions across all methods
Average ROC:  0.724009221308043
Average PRC:  0.20830537872182475
Std ROC:  0.014987764064794124
Variance PRC:  0.00910711528156192 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 50, 'subsampled_rate': 0.2} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75145553 0.24854447] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.7512084 0.2487916]
before perturbation, mean and variance of data mean embedding are 0.011711 and 0.064247 
after perturbation, mean and variance of data mean embedding are 0.011673 and 0.064251 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.640
PRC on test generated data is 0.360

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.759
PRC on test generated data is 0.442

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.751
PRC on test generated data is 0.408

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.557
PRC on test generated data is 0.290

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.764
PRC on test generated data is 0.424

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.717
PRC on test generated data is 0.386

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.788
PRC on test generated data is 0.453

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.764
PRC on test generated data is 0.424

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.776
PRC on test generated data is 0.446

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.769
PRC on test generated data is 0.426

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.708
PRC on test generated data is 0.419

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.778
PRC on test generated data is 0.439
----------------------------------------
roc mean across methods is 0.731
prc mean across methods is 0.410


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75371411 0.24628589] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75359247 0.24640753]
before perturbation, mean and variance of data mean embedding are 0.011512 and 0.064775 
after perturbation, mean and variance of data mean embedding are 0.011497 and 0.064805 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.619
PRC on test generated data is 0.364

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.784
PRC on test generated data is 0.482

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.761
PRC on test generated data is 0.431

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.531
PRC on test generated data is 0.275

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.759
PRC on test generated data is 0.439

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.694
PRC on test generated data is 0.399

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.804
PRC on test generated data is 0.507

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.785
PRC on test generated data is 0.491

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.795
PRC on test generated data is 0.477

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.790
PRC on test generated data is 0.490

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.658
PRC on test generated data is 0.379

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.794
PRC on test generated data is 0.493
----------------------------------------
roc mean across methods is 0.731
prc mean across methods is 0.436


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75183196 0.24816804] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75153762 0.24846238]
before perturbation, mean and variance of data mean embedding are 0.011658 and 0.064447 
after perturbation, mean and variance of data mean embedding are 0.011600 and 0.064480 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.690
PRC on test generated data is 0.374

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.766
PRC on test generated data is 0.447

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.756
PRC on test generated data is 0.415

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.518
PRC on test generated data is 0.259

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.762
PRC on test generated data is 0.432

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.702
PRC on test generated data is 0.393

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.780
PRC on test generated data is 0.450

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.767
PRC on test generated data is 0.431

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.790
PRC on test generated data is 0.464

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.785
PRC on test generated data is 0.456

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.629
PRC on test generated data is 0.366

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.778
PRC on test generated data is 0.451
----------------------------------------
roc mean across methods is 0.727
prc mean across methods is 0.412


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75331259 0.24668741] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.753271 0.246729]
before perturbation, mean and variance of data mean embedding are 0.011542 and 0.064411 
after perturbation, mean and variance of data mean embedding are 0.011523 and 0.064449 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.629
PRC on test generated data is 0.352

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.780
PRC on test generated data is 0.468

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.765
PRC on test generated data is 0.432

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.564
PRC on test generated data is 0.302

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.745
PRC on test generated data is 0.427

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.654
PRC on test generated data is 0.398

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.769
PRC on test generated data is 0.459

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.751
PRC on test generated data is 0.424

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.774
PRC on test generated data is 0.467

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.768
PRC on test generated data is 0.471

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.639
PRC on test generated data is 0.341

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.770
PRC on test generated data is 0.475
----------------------------------------
roc mean across methods is 0.717
prc mean across methods is 0.418


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75120458 0.24879542] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75137456 0.24862544]
before perturbation, mean and variance of data mean embedding are 0.011646 and 0.064622 
after perturbation, mean and variance of data mean embedding are 0.011667 and 0.064734 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.632
PRC on test generated data is 0.372

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.791
PRC on test generated data is 0.478

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.772
PRC on test generated data is 0.431

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.474
PRC on test generated data is 0.242

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.463

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.672
PRC on test generated data is 0.387

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.784
PRC on test generated data is 0.480

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.774
PRC on test generated data is 0.459

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.781
PRC on test generated data is 0.473

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.779
PRC on test generated data is 0.479

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.621
PRC on test generated data is 0.340

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.771
PRC on test generated data is 0.448
----------------------------------------
roc mean across methods is 0.718
prc mean across methods is 0.421


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.64194764 0.77599794 0.76106515 0.52884631 0.75853292 0.68781513
 0.78512018 0.76797331 0.78322369 0.77806849 0.65112032 0.77828877]
Average PRC each method:  [0.36434263 0.46340936 0.42336274 0.27355604 0.43712964 0.3926825
 0.46991632 0.4458828  0.46548948 0.4644523  0.3691473  0.46106319]
Std ROC each method:  [0.02474452 0.01164095 0.00699602 0.03202368 0.00690448 0.0223371
 0.01128778 0.0112725  0.00779476 0.00870154 0.03123696 0.00867903]
Std PRC each method:  [0.00835922 0.01623192 0.00993434 0.02134512 0.01385407 0.00541632
 0.02130008 0.02612132 0.01065674 0.0220642  0.02910814 0.01976981]
Average over repetitions across all methods
Average ROC:  0.7248333196662265
Average PRC:  0.4192028585709431
Std ROC:  0.006124665357061838
Variance PRC:  0.009182038761161289 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 50, 'subsampled_rate': 0.4} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85755839 0.14244161] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85752233 0.14247767]
before perturbation, mean and variance of data mean embedding are 0.011510 and 0.071080 
after perturbation, mean and variance of data mean embedding are 0.011488 and 0.071071 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.624
PRC on test generated data is 0.226

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.764
PRC on test generated data is 0.291

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.762
PRC on test generated data is 0.265

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.541
PRC on test generated data is 0.161

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.686
PRC on test generated data is 0.224

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.620
PRC on test generated data is 0.263

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.771
PRC on test generated data is 0.281

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.748
PRC on test generated data is 0.283

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.762
PRC on test generated data is 0.284

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.753
PRC on test generated data is 0.303

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.666
PRC on test generated data is 0.269

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.777
PRC on test generated data is 0.295
----------------------------------------
roc mean across methods is 0.706
prc mean across methods is 0.262


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85816019 0.14183981] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85815489 0.14184511]
before perturbation, mean and variance of data mean embedding are 0.011520 and 0.071038 
after perturbation, mean and variance of data mean embedding are 0.011511 and 0.071052 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.606
PRC on test generated data is 0.231

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.767
PRC on test generated data is 0.293

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.269

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.480
PRC on test generated data is 0.139

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.755
PRC on test generated data is 0.281

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.687
PRC on test generated data is 0.300

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.779
PRC on test generated data is 0.296

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.765
PRC on test generated data is 0.288

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.778
PRC on test generated data is 0.291

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.788
PRC on test generated data is 0.322

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.725
PRC on test generated data is 0.273

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.797
PRC on test generated data is 0.327
----------------------------------------
roc mean across methods is 0.724
prc mean across methods is 0.276


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85748675 0.14251325] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85745521 0.14254479]
before perturbation, mean and variance of data mean embedding are 0.011432 and 0.070974 
after perturbation, mean and variance of data mean embedding are 0.011399 and 0.070983 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.645
PRC on test generated data is 0.224

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.762
PRC on test generated data is 0.285

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.773
PRC on test generated data is 0.276

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.518
PRC on test generated data is 0.145

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.719
PRC on test generated data is 0.252

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.654
PRC on test generated data is 0.274

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.766
PRC on test generated data is 0.301

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.761
PRC on test generated data is 0.280

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.766
PRC on test generated data is 0.283

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.762
PRC on test generated data is 0.299

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.675
PRC on test generated data is 0.243

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.767
PRC on test generated data is 0.283
----------------------------------------
roc mean across methods is 0.714
prc mean across methods is 0.262


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85880499 0.14119501] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85867651 0.14132349]
before perturbation, mean and variance of data mean embedding are 0.011355 and 0.070028 
after perturbation, mean and variance of data mean embedding are 0.011344 and 0.070042 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.685
PRC on test generated data is 0.225

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.782
PRC on test generated data is 0.319

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.756
PRC on test generated data is 0.266

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.685
PRC on test generated data is 0.224

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.734
PRC on test generated data is 0.256

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.650
PRC on test generated data is 0.277

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.767
PRC on test generated data is 0.304

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.735
PRC on test generated data is 0.264

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.757
PRC on test generated data is 0.280

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.758
PRC on test generated data is 0.299

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.706
PRC on test generated data is 0.262

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.758
PRC on test generated data is 0.294
----------------------------------------
roc mean across methods is 0.731
prc mean across methods is 0.272


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85869036 0.14130964] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85876255 0.14123745]
before perturbation, mean and variance of data mean embedding are 0.011594 and 0.070748 
after perturbation, mean and variance of data mean embedding are 0.011607 and 0.070801 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.655
PRC on test generated data is 0.227

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.788
PRC on test generated data is 0.325

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.770
PRC on test generated data is 0.279

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.510
PRC on test generated data is 0.148

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.750
PRC on test generated data is 0.274

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.674
PRC on test generated data is 0.280

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.789
PRC on test generated data is 0.306

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.691
PRC on test generated data is 0.230

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.779
PRC on test generated data is 0.297

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.767
PRC on test generated data is 0.292

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.627
PRC on test generated data is 0.225

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.767
PRC on test generated data is 0.286
----------------------------------------
roc mean across methods is 0.714
prc mean across methods is 0.264


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.64319058 0.77245968 0.76483271 0.54685094 0.72872289 0.65720091
 0.77442493 0.73981705 0.7681669  0.76560363 0.67984402 0.77308577]
Average PRC each method:  [0.22679795 0.30269599 0.27104298 0.16318846 0.25713188 0.27866106
 0.29758807 0.26894142 0.28699658 0.30302303 0.25446969 0.29702277]
Std ROC each method:  [0.02695286 0.01048164 0.0061977  0.07190466 0.02488634 0.02283797
 0.00856687 0.02673713 0.0086257  0.01188807 0.03396648 0.01313104]
Std PRC each method:  [0.00223332 0.0164283  0.00560459 0.03100611 0.01987178 0.01196092
 0.00899671 0.02101125 0.0062468  0.01031022 0.01770713 0.01557026]
Average over repetitions across all methods
Average ROC:  0.7178500019993751
Average PRC:  0.2672966570398895
Std ROC:  0.008747872572475472
Variance PRC:  0.005726266419618873 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 50, 'subsampled_rate': 0.6} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9011952 0.0988048] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90103346 0.09896654]
before perturbation, mean and variance of data mean embedding are 0.011403 and 0.073340 
after perturbation, mean and variance of data mean embedding are 0.011387 and 0.073331 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.648
PRC on test generated data is 0.174

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.774
PRC on test generated data is 0.238

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.761
PRC on test generated data is 0.200

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.513
PRC on test generated data is 0.105

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.762
PRC on test generated data is 0.205

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.697
PRC on test generated data is 0.234

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.799
PRC on test generated data is 0.238

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.782
PRC on test generated data is 0.232

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.791
PRC on test generated data is 0.240

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.793
PRC on test generated data is 0.259

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.722
PRC on test generated data is 0.228

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.787
PRC on test generated data is 0.250
----------------------------------------
roc mean across methods is 0.736
prc mean across methods is 0.217


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9007841 0.0992159] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90076208 0.09923792]
before perturbation, mean and variance of data mean embedding are 0.011390 and 0.073555 
after perturbation, mean and variance of data mean embedding are 0.011384 and 0.073561 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.666
PRC on test generated data is 0.164

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.778
PRC on test generated data is 0.239

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.766
PRC on test generated data is 0.201

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.560
PRC on test generated data is 0.131

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.217

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.672
PRC on test generated data is 0.220

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.802
PRC on test generated data is 0.268

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.776
PRC on test generated data is 0.228

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.793
PRC on test generated data is 0.239

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.791
PRC on test generated data is 0.254

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.666
PRC on test generated data is 0.174

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.795
PRC on test generated data is 0.257
----------------------------------------
roc mean across methods is 0.736
prc mean across methods is 0.216


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90027273 0.09972727] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.9003068 0.0996932]
before perturbation, mean and variance of data mean embedding are 0.011368 and 0.073753 
after perturbation, mean and variance of data mean embedding are 0.011345 and 0.073755 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.618
PRC on test generated data is 0.163

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.798
PRC on test generated data is 0.227

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.755
PRC on test generated data is 0.189

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.507
PRC on test generated data is 0.099

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.759
PRC on test generated data is 0.217

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.684
PRC on test generated data is 0.217

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.780
PRC on test generated data is 0.237

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.760
PRC on test generated data is 0.218

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.218

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.768
PRC on test generated data is 0.224

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.706
PRC on test generated data is 0.185

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.768
PRC on test generated data is 0.224
----------------------------------------
roc mean across methods is 0.723
prc mean across methods is 0.202


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90148598 0.09851402] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90159742 0.09840258]
before perturbation, mean and variance of data mean embedding are 0.011489 and 0.073867 
after perturbation, mean and variance of data mean embedding are 0.011481 and 0.073876 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.597
PRC on test generated data is 0.167

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.775
PRC on test generated data is 0.237

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.207

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.538
PRC on test generated data is 0.119

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.712
PRC on test generated data is 0.210

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.623
PRC on test generated data is 0.222

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.773
PRC on test generated data is 0.212

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.730
PRC on test generated data is 0.181

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.784
PRC on test generated data is 0.233

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.766
PRC on test generated data is 0.206

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.628
PRC on test generated data is 0.163

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.783
PRC on test generated data is 0.226
----------------------------------------
roc mean across methods is 0.706
prc mean across methods is 0.199


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90060362 0.09939638] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90064025 0.09935975]
before perturbation, mean and variance of data mean embedding are 0.011399 and 0.073811 
after perturbation, mean and variance of data mean embedding are 0.011407 and 0.073846 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.698
PRC on test generated data is 0.187

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.790
PRC on test generated data is 0.244

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.769
PRC on test generated data is 0.204

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.553
PRC on test generated data is 0.137

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.764
PRC on test generated data is 0.231

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.712
PRC on test generated data is 0.219

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.811
PRC on test generated data is 0.276

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.759
PRC on test generated data is 0.216

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.794
PRC on test generated data is 0.244

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.792
PRC on test generated data is 0.256

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.633
PRC on test generated data is 0.180

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.793
PRC on test generated data is 0.251
----------------------------------------
roc mean across methods is 0.739
prc mean across methods is 0.220


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.64526708 0.78286173 0.76361872 0.53423634 0.75301785 0.67765041
 0.7928964  0.76150895 0.78614288 0.78207215 0.67103641 0.78515983]
Average PRC each method:  [0.17122104 0.23705493 0.20008488 0.11820873 0.21616072 0.22221067
 0.24623124 0.21496671 0.23476832 0.23981513 0.18600093 0.24154589]
Std ROC each method:  [0.03532279 0.00933567 0.00521537 0.0207739  0.02061609 0.03022211
 0.01442007 0.01785543 0.00965764 0.01231847 0.03792599 0.00949233]
Std PRC each method:  [0.00885508 0.00567934 0.00617075 0.01449569 0.00882971 0.00627608
 0.0230339  0.01794601 0.00936696 0.0209722  0.02226602 0.01391186]
Average over repetitions across all methods
Average ROC:  0.7279557281150146
Average PRC:  0.21068909939568675
Std ROC:  0.012178703588795362
Variance PRC:  0.008867081939537964 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 100, 'subsampled_rate': 0.2} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75145553 0.24854447] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75129839 0.24870161]
before perturbation, mean and variance of data mean embedding are 0.005975 and 0.046381 
after perturbation, mean and variance of data mean embedding are 0.005974 and 0.046389 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.669
PRC on test generated data is 0.357

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.782
PRC on test generated data is 0.468

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.757
PRC on test generated data is 0.414

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.552
PRC on test generated data is 0.289

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.771
PRC on test generated data is 0.457

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.732
PRC on test generated data is 0.405

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.799
PRC on test generated data is 0.482

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.786
PRC on test generated data is 0.481

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.786
PRC on test generated data is 0.462

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.795
PRC on test generated data is 0.486

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.697
PRC on test generated data is 0.435

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.793
PRC on test generated data is 0.487
----------------------------------------
roc mean across methods is 0.743
prc mean across methods is 0.435


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75371411 0.24628589] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75368839 0.24631161]
before perturbation, mean and variance of data mean embedding are 0.005872 and 0.046247 
after perturbation, mean and variance of data mean embedding are 0.005856 and 0.046286 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.687
PRC on test generated data is 0.391

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.700
PRC on test generated data is 0.382

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.742
PRC on test generated data is 0.414

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.530
PRC on test generated data is 0.278

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.458

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.642
PRC on test generated data is 0.352

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.784
PRC on test generated data is 0.488

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.757
PRC on test generated data is 0.456

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.772
PRC on test generated data is 0.455

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.782
PRC on test generated data is 0.482

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.678
PRC on test generated data is 0.366

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.775
PRC on test generated data is 0.477
----------------------------------------
roc mean across methods is 0.718
prc mean across methods is 0.417


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75183196 0.24816804] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75183756 0.24816244]
before perturbation, mean and variance of data mean embedding are 0.006011 and 0.046082 
after perturbation, mean and variance of data mean embedding are 0.005947 and 0.046139 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.665
PRC on test generated data is 0.358

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.704
PRC on test generated data is 0.411

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.741
PRC on test generated data is 0.401

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.642
PRC on test generated data is 0.351

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.750
PRC on test generated data is 0.423

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.645
PRC on test generated data is 0.350

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.798
PRC on test generated data is 0.482

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.772
PRC on test generated data is 0.448

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.791
PRC on test generated data is 0.465

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.786
PRC on test generated data is 0.458

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.693
PRC on test generated data is 0.388

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.793
PRC on test generated data is 0.483
----------------------------------------
roc mean across methods is 0.732
prc mean across methods is 0.418


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75331259 0.24668741] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75362676 0.24637324]
before perturbation, mean and variance of data mean embedding are 0.005960 and 0.046415 
after perturbation, mean and variance of data mean embedding are 0.005938 and 0.046435 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.692
PRC on test generated data is 0.404

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.772
PRC on test generated data is 0.474

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.762
PRC on test generated data is 0.429

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.730
PRC on test generated data is 0.412

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.751
PRC on test generated data is 0.445

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.646
PRC on test generated data is 0.404

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.771
PRC on test generated data is 0.474

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.741
PRC on test generated data is 0.411

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.766
PRC on test generated data is 0.440

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.769
PRC on test generated data is 0.459

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.727
PRC on test generated data is 0.391

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.758
PRC on test generated data is 0.430
----------------------------------------
roc mean across methods is 0.740
prc mean across methods is 0.431


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.2
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.2_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.75120458 0.24879542] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.75130935 0.24869065]
before perturbation, mean and variance of data mean embedding are 0.006007 and 0.046702 
after perturbation, mean and variance of data mean embedding are 0.006022 and 0.046735 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.604
PRC on test generated data is 0.345

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.786
PRC on test generated data is 0.474

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.764
PRC on test generated data is 0.422

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.498
PRC on test generated data is 0.247

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.774
PRC on test generated data is 0.477

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.645
PRC on test generated data is 0.394

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.789
PRC on test generated data is 0.485

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.767
PRC on test generated data is 0.442

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.792
PRC on test generated data is 0.481

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.787
PRC on test generated data is 0.487

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.592
PRC on test generated data is 0.312

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.797
PRC on test generated data is 0.493
----------------------------------------
roc mean across methods is 0.716
prc mean across methods is 0.421


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.66348607 0.74867563 0.75317624 0.59047142 0.76280725 0.66201834
 0.78805811 0.76450557 0.78142776 0.783643   0.67728183 0.7833722 ]
Average PRC each method:  [0.37076998 0.44180745 0.41612974 0.31552115 0.45202712 0.38114064
 0.48219565 0.4476102  0.46063797 0.47448317 0.37829369 0.47388112]
Std ROC each method:  [0.03124506 0.03836052 0.00966825 0.08459111 0.01003346 0.0351686
 0.01003245 0.01491266 0.01082155 0.00825889 0.04542274 0.0150139 ]
Std PRC each method:  [0.02278072 0.03823162 0.00950276 0.05899755 0.01772558 0.02456547
 0.00463946 0.02242786 0.0131075  0.01315353 0.04016071 0.02254469]
Average over repetitions across all methods
Average ROC:  0.7299102835951085
Average PRC:  0.42454149014803894
Std ROC:  0.011066700074771934
Variance PRC:  0.007349358365130991 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 100, 'subsampled_rate': 0.4} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85755839 0.14244161] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85758459 0.14241541]
before perturbation, mean and variance of data mean embedding are 0.005971 and 0.051002 
after perturbation, mean and variance of data mean embedding are 0.005970 and 0.050993 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.687
PRC on test generated data is 0.232

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.713
PRC on test generated data is 0.238

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.738
PRC on test generated data is 0.247

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.705
PRC on test generated data is 0.242

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.771
PRC on test generated data is 0.297

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.647
PRC on test generated data is 0.222

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.795
PRC on test generated data is 0.343

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.754
PRC on test generated data is 0.267

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.791
PRC on test generated data is 0.304

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.776
PRC on test generated data is 0.308

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.684
PRC on test generated data is 0.242

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.780
PRC on test generated data is 0.306
----------------------------------------
roc mean across methods is 0.737
prc mean across methods is 0.271


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85816019 0.14183981] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85786382 0.14213618]
before perturbation, mean and variance of data mean embedding are 0.005890 and 0.050764 
after perturbation, mean and variance of data mean embedding are 0.005881 and 0.050772 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.711
PRC on test generated data is 0.256

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.804
PRC on test generated data is 0.311

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.754
PRC on test generated data is 0.261

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.559
PRC on test generated data is 0.174

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.753
PRC on test generated data is 0.277

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.679
PRC on test generated data is 0.239

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.815
PRC on test generated data is 0.348

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.721
PRC on test generated data is 0.251

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.790
PRC on test generated data is 0.314

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.786
PRC on test generated data is 0.321

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.725
PRC on test generated data is 0.269

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.786
PRC on test generated data is 0.314
----------------------------------------
roc mean across methods is 0.740
prc mean across methods is 0.278


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85748675 0.14251325] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85743146 0.14256854]
before perturbation, mean and variance of data mean embedding are 0.005861 and 0.051033 
after perturbation, mean and variance of data mean embedding are 0.005825 and 0.051050 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.652
PRC on test generated data is 0.237

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.789
PRC on test generated data is 0.343

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.758
PRC on test generated data is 0.260

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.577
PRC on test generated data is 0.176

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.692
PRC on test generated data is 0.230

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.691
PRC on test generated data is 0.279

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.797
PRC on test generated data is 0.323

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.750
PRC on test generated data is 0.275

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.780
PRC on test generated data is 0.315

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.758
PRC on test generated data is 0.321

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.701
PRC on test generated data is 0.234

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.763
PRC on test generated data is 0.299
----------------------------------------
roc mean across methods is 0.726
prc mean across methods is 0.274


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85880499 0.14119501] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.85876634 0.14123366]
before perturbation, mean and variance of data mean embedding are 0.005909 and 0.051075 
after perturbation, mean and variance of data mean embedding are 0.005896 and 0.051075 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.725
PRC on test generated data is 0.272

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.778
PRC on test generated data is 0.324

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.762
PRC on test generated data is 0.272

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.614
PRC on test generated data is 0.258

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.745
PRC on test generated data is 0.314

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.740
PRC on test generated data is 0.299

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.811
PRC on test generated data is 0.374

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.751
PRC on test generated data is 0.303

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.770
PRC on test generated data is 0.299

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.778
PRC on test generated data is 0.348

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.666
PRC on test generated data is 0.284

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.782
PRC on test generated data is 0.317
----------------------------------------
roc mean across methods is 0.743
prc mean across methods is 0.305


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.4
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.4_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.85869036 0.14130964] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.8585986 0.1414014]
before perturbation, mean and variance of data mean embedding are 0.005869 and 0.050990 
after perturbation, mean and variance of data mean embedding are 0.005878 and 0.050994 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.661
PRC on test generated data is 0.225

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.778
PRC on test generated data is 0.329

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.768
PRC on test generated data is 0.279

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.514
PRC on test generated data is 0.149

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.771
PRC on test generated data is 0.298

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.669
PRC on test generated data is 0.278

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.810
PRC on test generated data is 0.351

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.780
PRC on test generated data is 0.310

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.789
PRC on test generated data is 0.346

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.787
PRC on test generated data is 0.341

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.599
PRC on test generated data is 0.207

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.798
PRC on test generated data is 0.319
----------------------------------------
roc mean across methods is 0.727
prc mean across methods is 0.286


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.68726927 0.77234123 0.75603814 0.59359348 0.74648912 0.68500665
 0.80567527 0.75111876 0.78388089 0.77675305 0.67508838 0.78184241]
Average PRC each method:  [0.24452008 0.30888407 0.26360168 0.20001532 0.283237   0.26345102
 0.3480253  0.28128626 0.31568342 0.32770446 0.24717427 0.31087816]
Std ROC each method:  [0.02804086 0.03108827 0.00993792 0.0642555  0.02914289 0.03110365
 0.0080859  0.01853179 0.00793896 0.0102869  0.04258359 0.01121917]
Std PRC each method:  [0.01721952 0.03672377 0.01100459 0.04232794 0.02881591 0.02850696
 0.01633763 0.02206267 0.01610914 0.01455464 0.02714362 0.00754325]
Average over repetitions across all methods
Average ROC:  0.7345913875396471
Average PRC:  0.28287175327589165
Std ROC:  0.007143578176903744
Variance PRC:  0.012305253926393159 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 100, 'subsampled_rate': 0.6} 


Repetition:  0
 • seed                     - 0
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9011952 0.0988048] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90122717 0.09877283]
before perturbation, mean and variance of data mean embedding are 0.005896 and 0.052468 
after perturbation, mean and variance of data mean embedding are 0.005896 and 0.052458 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.639
PRC on test generated data is 0.187

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.784
PRC on test generated data is 0.256

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.762
PRC on test generated data is 0.203

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.518
PRC on test generated data is 0.107

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.754
PRC on test generated data is 0.230

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.752
PRC on test generated data is 0.250

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.808
PRC on test generated data is 0.267

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.773
PRC on test generated data is 0.248

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.793
PRC on test generated data is 0.241

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.790
PRC on test generated data is 0.249

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.625
PRC on test generated data is 0.170

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.787
PRC on test generated data is 0.251
----------------------------------------
roc mean across methods is 0.732
prc mean across methods is 0.222


Repetition:  1
 • seed                     - 1
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9007841 0.0992159] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90094171 0.09905829]
before perturbation, mean and variance of data mean embedding are 0.005843 and 0.053072 
after perturbation, mean and variance of data mean embedding are 0.005837 and 0.053075 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.718
PRC on test generated data is 0.202

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.800
PRC on test generated data is 0.233

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.198

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.699
PRC on test generated data is 0.184

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.763
PRC on test generated data is 0.227

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.686
PRC on test generated data is 0.191

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.798
PRC on test generated data is 0.265

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.777
PRC on test generated data is 0.238

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.790
PRC on test generated data is 0.233

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.773
PRC on test generated data is 0.246

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.708
PRC on test generated data is 0.210

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.788
PRC on test generated data is 0.256
----------------------------------------
roc mean across methods is 0.755
prc mean across methods is 0.224


Repetition:  2
 • seed                     - 2
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90027273 0.09972727] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90024371 0.09975629]
before perturbation, mean and variance of data mean embedding are 0.005886 and 0.052587 
after perturbation, mean and variance of data mean embedding are 0.005860 and 0.052596 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.716
PRC on test generated data is 0.174

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.788
PRC on test generated data is 0.212

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.753
PRC on test generated data is 0.188

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.528
PRC on test generated data is 0.107

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.754
PRC on test generated data is 0.205

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.654
PRC on test generated data is 0.190

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.801
PRC on test generated data is 0.235

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.761
PRC on test generated data is 0.197

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.788
PRC on test generated data is 0.219

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.787
PRC on test generated data is 0.219

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.727
PRC on test generated data is 0.187

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.776
PRC on test generated data is 0.208
----------------------------------------
roc mean across methods is 0.736
prc mean across methods is 0.195


Repetition:  3
 • seed                     - 3
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90148598 0.09851402] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90151683 0.09848317]
before perturbation, mean and variance of data mean embedding are 0.005875 and 0.052479 
after perturbation, mean and variance of data mean embedding are 0.005866 and 0.052477 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.709
PRC on test generated data is 0.186

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.778
PRC on test generated data is 0.266

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.759
PRC on test generated data is 0.202

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.688
PRC on test generated data is 0.176

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.696
PRC on test generated data is 0.176

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.715
PRC on test generated data is 0.236

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.767
PRC on test generated data is 0.218

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.691
PRC on test generated data is 0.170

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.707
PRC on test generated data is 0.179

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.704
PRC on test generated data is 0.189

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.691
PRC on test generated data is 0.219

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.736
PRC on test generated data is 0.201
----------------------------------------
roc mean across methods is 0.720
prc mean across methods is 0.202


Repetition:  4
 • seed                     - 4
 • data_name                - census
 • batch_rate               - 0.1
 • epochs                   - 400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.6
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - census_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/census_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.1_lr=0.01_n_epoch=400_undersam_rate=0.6_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
census dataset
raw input features (199523, 40)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90060362 0.09939638] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90057091 0.09942909]
before perturbation, mean and variance of data mean embedding are 0.005915 and 0.052861 
after perturbation, mean and variance of data mean embedding are 0.005921 and 0.052860 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.664
PRC on test generated data is 0.229

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.783
PRC on test generated data is 0.237

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.758
PRC on test generated data is 0.193

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.505
PRC on test generated data is 0.100

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.779
PRC on test generated data is 0.242

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.749
PRC on test generated data is 0.212

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.805
PRC on test generated data is 0.253

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.786
PRC on test generated data is 0.259

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.787
PRC on test generated data is 0.237

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.803
PRC on test generated data is 0.274

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.703
PRC on test generated data is 0.202

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.792
PRC on test generated data is 0.251
----------------------------------------
roc mean across methods is 0.743
prc mean across methods is 0.224


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.68911202 0.78663936 0.75901336 0.58767407 0.74922014 0.7113934
 0.79581585 0.75755642 0.77298312 0.77137579 0.69080892 0.7755278 ]
Average PRC each method:  [0.1955817  0.24069995 0.19665734 0.13506685 0.21616842 0.21590914
 0.24751829 0.22237754 0.22203915 0.23551968 0.19756156 0.23343077]
Std ROC each method:  [0.03189695 0.00749469 0.00360779 0.0868709  0.02789448 0.03727833
 0.01471127 0.03411889 0.03310315 0.03488691 0.03480737 0.02073189]
Std PRC each method:  [0.01886362 0.01870419 0.00555997 0.03717638 0.023264   0.02400108
 0.01855879 0.03356685 0.0224771  0.02904601 0.0171945  0.02402491]
Average over repetitions across all methods
Average ROC:  0.7372600197014001
Average PRC:  0.2132108660004945
Std ROC:  0.011586505489860146
Variance PRC:  0.012280552653371836 


 -------------------------------------------------------------------------------- 





 ******************************
census
Max ROC!  0.732301230800339
Max PRC!  0.43012083739763296
Setup:  {'batch_rate': 0.1, 'kernel_length': 0.005, 'n_epochs': 400, 'order_hermite': 10, 'subsampled_rate': 0.2}
****************************************************************************************************



{'batch_rate': 0.5, 'kernel_length': 0.005, 'n_epochs': 800, 'order_hermite': 10, 'subsampled_rate': 0.8} 


Repetition:  0
 • seed                     - 0
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9244898 0.0755102] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90852183 0.09147817]
before perturbation, mean and variance of data mean embedding are 0.023717 and 0.116923 
after perturbation, mean and variance of data mean embedding are 0.018427 and 0.191044 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.514
PRC on test generated data is 0.133

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.505
PRC on test generated data is 0.131

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.658
PRC on test generated data is 0.226

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.514
PRC on test generated data is 0.133

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.584
PRC on test generated data is 0.218

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.505
PRC on test generated data is 0.131

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.592
PRC on test generated data is 0.188

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.548
PRC on test generated data is 0.164

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.553
PRC on test generated data is 0.184

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.503
PRC on test generated data is 0.131

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.519
PRC on test generated data is 0.134

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.130
----------------------------------------
roc mean across methods is 0.541
prc mean across methods is 0.159


Repetition:  1
 • seed                     - 1
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.91632653 0.08367347] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.88229538 0.11770462]
before perturbation, mean and variance of data mean embedding are 0.023380 and 0.116315 
after perturbation, mean and variance of data mean embedding are 0.017814 and 0.200610 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.677
PRC on test generated data is 0.231

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.640
PRC on test generated data is 0.198

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 1.000
PRC on test generated data is 1.000

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.547
PRC on test generated data is 0.115

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.537
PRC on test generated data is 0.131

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.534
PRC on test generated data is 0.107
----------------------------------------
roc mean across methods is 0.578
prc mean across methods is 0.197


Repetition:  2
 • seed                     - 2
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90612245 0.09387755] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.91246841 0.08753159]
before perturbation, mean and variance of data mean embedding are 0.024401 and 0.116546 
after perturbation, mean and variance of data mean embedding are 0.017013 and 0.200894 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.491
PRC on test generated data is 0.057

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.575
PRC on test generated data is 0.068

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.537
PRC on test generated data is 0.065

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.530
PRC on test generated data is 0.060

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.057
----------------------------------------
roc mean across methods is 0.511
prc mean across methods is 0.059


Repetition:  3
 • seed                     - 3
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.91020408 0.08979592] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90241114 0.09758886]
before perturbation, mean and variance of data mean embedding are 0.024017 and 0.117305 
after perturbation, mean and variance of data mean embedding are 0.020225 and 0.202458 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.556
PRC on test generated data is 0.176

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.607
PRC on test generated data is 0.205

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.507
PRC on test generated data is 0.074

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.547
PRC on test generated data is 0.102

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.556
PRC on test generated data is 0.176

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.556
PRC on test generated data is 0.176

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.564
PRC on test generated data is 0.085
----------------------------------------
roc mean across methods is 0.533
prc mean across methods is 0.113


Repetition:  4
 • seed                     - 4
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 10
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90204082 0.09795918] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90240843 0.09759157]
before perturbation, mean and variance of data mean embedding are 0.023402 and 0.114531 
after perturbation, mean and variance of data mean embedding are 0.023737 and 0.202414 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.596
PRC on test generated data is 0.133

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.587
PRC on test generated data is 0.083

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.983
PRC on test generated data is 0.556

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.632
PRC on test generated data is 0.069

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.583
PRC on test generated data is 0.073

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.549
PRC on test generated data is 0.048

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.632
PRC on test generated data is 0.069
----------------------------------------
roc mean across methods is 0.589
prc mean across methods is 0.103


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.52195628 0.53629494 0.58809713 0.5010796  0.74973752 0.54568587
 0.55045932 0.53063788 0.52917438 0.50064252 0.50373832 0.54606293]
Average PRC each method:  [0.09869919 0.10648019 0.14805047 0.0803252  0.40926445 0.09071396
 0.10419478 0.10846988 0.1178523  0.07983449 0.08054929 0.08957265]
Std ROC each method:  [0.03730048 0.07027674 0.05720853 0.00728028 0.19776737 0.04630128
 0.03400942 0.02513735 0.02464586 0.00128505 0.00747664 0.04929125]
Std PRC each method:  [0.03079831 0.06913031 0.06640051 0.03249755 0.33626477 0.02696042
 0.04489299 0.05308498 0.05947051 0.03170222 0.0328641  0.02630424]
Average over repetitions across all methods
Average ROC:  0.5502972249929237
Average PRC:  0.12616723782440348
Std ROC:  0.02882837488407038
Variance PRC:  0.04770885675495763 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.5, 'kernel_length': 0.005, 'n_epochs': 800, 'order_hermite': 20, 'subsampled_rate': 0.8} 


Repetition:  0
 • seed                     - 0
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9244898 0.0755102] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.95198519 0.04801481]
before perturbation, mean and variance of data mean embedding are 0.015482 and 0.091324 
after perturbation, mean and variance of data mean embedding are 0.011360 and 0.184773 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.511
PRC on test generated data is 0.133

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.538
PRC on test generated data is 0.143

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.611
PRC on test generated data is 0.240

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.494
PRC on test generated data is 0.129

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.480
PRC on test generated data is 0.127

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.560
PRC on test generated data is 0.153

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.580
PRC on test generated data is 0.199

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.580
PRC on test generated data is 0.199

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.531
PRC on test generated data is 0.184

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.130

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.499
PRC on test generated data is 0.130

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.507
PRC on test generated data is 0.132
----------------------------------------
roc mean across methods is 0.532
prc mean across methods is 0.158


Repetition:  1
 • seed                     - 1
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.91632653 0.08367347] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.93005297 0.06994703]
before perturbation, mean and variance of data mean embedding are 0.015494 and 0.090438 
after perturbation, mean and variance of data mean embedding are 0.013597 and 0.189374 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.579
PRC on test generated data is 0.192

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.574
PRC on test generated data is 0.165

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.678
PRC on test generated data is 0.196

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.579
PRC on test generated data is 0.192

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.561
PRC on test generated data is 0.129

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.635
PRC on test generated data is 0.186

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.579
PRC on test generated data is 0.192

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.098
----------------------------------------
roc mean across methods is 0.557
prc mean across methods is 0.145


Repetition:  2
 • seed                     - 2
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90612245 0.09387755] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90317919 0.09682081]
before perturbation, mean and variance of data mean embedding are 0.016178 and 0.090879 
after perturbation, mean and variance of data mean embedding are 0.010505 and 0.184433 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.563
PRC on test generated data is 0.096

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.643
PRC on test generated data is 0.326

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.491
PRC on test generated data is 0.057

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.991
PRC on test generated data is 0.778

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.635
PRC on test generated data is 0.093

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.554
PRC on test generated data is 0.077

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.617
PRC on test generated data is 0.112

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.571
PRC on test generated data is 0.192

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.057
----------------------------------------
roc mean across methods is 0.589
prc mean across methods is 0.163


Repetition:  3
 • seed                     - 3
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.91020408 0.08979592] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.93908851 0.06091149]
before perturbation, mean and variance of data mean embedding are 0.015296 and 0.090350 
after perturbation, mean and variance of data mean embedding are 0.012204 and 0.186649 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.556
PRC on test generated data is 0.176

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.551
PRC on test generated data is 0.121

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.542
PRC on test generated data is 0.093

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.520
PRC on test generated data is 0.077

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.816
PRC on test generated data is 0.424

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.556
PRC on test generated data is 0.176

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.556
PRC on test generated data is 0.176

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.556
PRC on test generated data is 0.176

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.547
PRC on test generated data is 0.102

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.447
PRC on test generated data is 0.073
----------------------------------------
roc mean across methods is 0.554
prc mean across methods is 0.145


Repetition:  4
 • seed                     - 4
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 20
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90204082 0.09795918] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.88697769 0.11302231]
before perturbation, mean and variance of data mean embedding are 0.015459 and 0.089813 
after perturbation, mean and variance of data mean embedding are 0.017933 and 0.191716 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.583
PRC on test generated data is 0.073

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.592
PRC on test generated data is 0.099

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.583
PRC on test generated data is 0.073

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.596
PRC on test generated data is 0.133

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.562
PRC on test generated data is 0.053

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.583
PRC on test generated data is 0.073

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.641
PRC on test generated data is 0.074

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.596
PRC on test generated data is 0.133

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.600
PRC on test generated data is 0.233

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.596
PRC on test generated data is 0.133

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.596
PRC on test generated data is 0.133

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.598
PRC on test generated data is 0.055
----------------------------------------
roc mean across methods is 0.594
prc mean across methods is 0.105


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.55826825 0.540705   0.61319736 0.54044707 0.6228741  0.58252353
 0.61807719 0.56960893 0.53736111 0.54454937 0.54398298 0.51047816]
Average PRC each method:  [0.13410709 0.1074187  0.19113976 0.12071138 0.23275277 0.11553176
 0.17462689 0.14355062 0.14951897 0.1455904  0.12273685 0.08289248]
Std ROC each method:  [0.02565113 0.03751253 0.04434167 0.04269461 0.18671561 0.05068158
 0.10871569 0.04018664 0.03763966 0.03856352 0.03975628 0.04884698]
Std PRC each method:  [0.04556997 0.04085346 0.08919957 0.04515742 0.27408244 0.04600968
 0.13300108 0.0385065  0.06339518 0.03397802 0.04418056 0.02874783]
Average over repetitions across all methods
Average ROC:  0.5651727529562776
Average PRC:  0.14338147172035215
Std ROC:  0.02298238063302206
Variance PRC:  0.020440548714545464 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.5, 'kernel_length': 0.005, 'n_epochs': 800, 'order_hermite': 50, 'subsampled_rate': 0.8} 


Repetition:  0
 • seed                     - 0
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9244898 0.0755102] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.91052307 0.08947693]
before perturbation, mean and variance of data mean embedding are 0.006950 and 0.063791 
after perturbation, mean and variance of data mean embedding are 0.004955 and 0.175051 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.500
PRC on test generated data is 0.130

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.531
PRC on test generated data is 0.184

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.688
PRC on test generated data is 0.456

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.130

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.606
PRC on test generated data is 0.223

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.130

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.892
PRC on test generated data is 0.685

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.562
PRC on test generated data is 0.239

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.130

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.130

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.130

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.519
PRC on test generated data is 0.135
----------------------------------------
roc mean across methods is 0.567
prc mean across methods is 0.225


Repetition:  1
 • seed                     - 1
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.91632653 0.08367347] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.92845395 0.07154605]
before perturbation, mean and variance of data mean embedding are 0.006967 and 0.063880 
after perturbation, mean and variance of data mean embedding are 0.004821 and 0.176203 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.586
PRC on test generated data is 0.126

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.690
PRC on test generated data is 0.288

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.552
PRC on test generated data is 0.118

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.608
PRC on test generated data is 0.143

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.982
PRC on test generated data is 0.750

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.542
PRC on test generated data is 0.173

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.537
PRC on test generated data is 0.131

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.539
PRC on test generated data is 0.107
----------------------------------------
roc mean across methods is 0.586
prc mean across methods is 0.186


Repetition:  2
 • seed                     - 2
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90612245 0.09387755] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.92701251 0.07298749]
before perturbation, mean and variance of data mean embedding are 0.007062 and 0.063014 
after perturbation, mean and variance of data mean embedding are 0.003942 and 0.176850 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.504
PRC on test generated data is 0.057

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.808
PRC on test generated data is 0.159

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.504
PRC on test generated data is 0.057

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.558
PRC on test generated data is 0.084

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.626
PRC on test generated data is 0.136

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.675
PRC on test generated data is 0.140

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.558
PRC on test generated data is 0.084

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.617
PRC on test generated data is 0.192

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.504
PRC on test generated data is 0.057

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.057
----------------------------------------
roc mean across methods is 0.571
prc mean across methods is 0.095


Repetition:  3
 • seed                     - 3
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.91020408 0.08979592] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.93480902 0.06519098]
before perturbation, mean and variance of data mean embedding are 0.007044 and 0.063212 
after perturbation, mean and variance of data mean embedding are 0.004661 and 0.176796 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.547
PRC on test generated data is 0.102

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.496
PRC on test generated data is 0.073

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.573
PRC on test generated data is 0.087

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.487
PRC on test generated data is 0.073

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.573
PRC on test generated data is 0.087
----------------------------------------
roc mean across methods is 0.515
prc mean across methods is 0.078


Repetition:  4
 • seed                     - 4
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 50
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90204082 0.09795918] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.87708183 0.12291817]
before perturbation, mean and variance of data mean embedding are 0.007046 and 0.062892 
after perturbation, mean and variance of data mean embedding are 0.009609 and 0.177461 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.632
PRC on test generated data is 0.069

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.694
PRC on test generated data is 0.081

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.541
PRC on test generated data is 0.046

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.041
----------------------------------------
roc mean across methods is 0.531
prc mean across methods is 0.047


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.50086207 0.5498078  0.64649614 0.50086207 0.54244436 0.58555833
 0.72456106 0.53253284 0.53083145 0.49736842 0.50899766 0.52635791]
Average PRC each method:  [0.07976809 0.10180278 0.20936231 0.07976809 0.10784295 0.11263169
 0.34045882 0.12198026 0.11332753 0.0796748  0.08080874 0.08542578]
Std ROC each method:  [0.00172414 0.05172061 0.11049929 0.00172414 0.04103288 0.07553522
 0.18447485 0.02746778 0.04542242 0.00526316 0.01592788 0.02754951]
Std PRC each method:  [0.0313786  0.04758424 0.14811833 0.0313786  0.06250201 0.02960798
 0.30995026 0.07298339 0.0521986  0.03144566 0.03012528 0.03389319]
Average over repetitions across all methods
Average ROC:  0.5538900089279941
Average PRC:  0.12607098624821916
Std ROC:  0.026846140734221625
Variance PRC:  0.06774017335915791 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.5, 'kernel_length': 0.005, 'n_epochs': 800, 'order_hermite': 100, 'subsampled_rate': 0.8} 


Repetition:  0
 • seed                     - 0
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.9244898 0.0755102] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.91504235 0.08495765]
before perturbation, mean and variance of data mean embedding are 0.004182 and 0.047798 
after perturbation, mean and variance of data mean embedding are 0.003814 and 0.171376 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.594
PRC on test generated data is 0.168

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.566
PRC on test generated data is 0.168

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.594
PRC on test generated data is 0.168

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.525
PRC on test generated data is 0.139

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.561
PRC on test generated data is 0.164

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.635
PRC on test generated data is 0.196

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.548
PRC on test generated data is 0.164

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.130

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.130

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.130

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.539
PRC on test generated data is 0.150

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.575
PRC on test generated data is 0.156
----------------------------------------
roc mean across methods is 0.553
prc mean across methods is 0.155


Repetition:  1
 • seed                     - 1
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.91632653 0.08367347] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90618953 0.09381047]
before perturbation, mean and variance of data mean embedding are 0.004219 and 0.047652 
after perturbation, mean and variance of data mean embedding are 0.002209 and 0.170515 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.579
PRC on test generated data is 0.192

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.579
PRC on test generated data is 0.192

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.574
PRC on test generated data is 0.165

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.552
PRC on test generated data is 0.173

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.098

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.495
PRC on test generated data is 0.098

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.579
PRC on test generated data is 0.192

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.098
----------------------------------------
roc mean across methods is 0.530
prc mean across methods is 0.133


Repetition:  2
 • seed                     - 2
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90612245 0.09387755] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.89493826 0.10506174]
before perturbation, mean and variance of data mean embedding are 0.004244 and 0.046908 
after perturbation, mean and variance of data mean embedding are -0.000959 and 0.171271 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.587
PRC on test generated data is 0.079

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.935
PRC on test generated data is 0.330

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.541
PRC on test generated data is 0.067

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.978
PRC on test generated data is 0.583

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.546
PRC on test generated data is 0.069

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.978
PRC on test generated data is 0.583

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.057

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.587
PRC on test generated data is 0.096

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.478
PRC on test generated data is 0.057
----------------------------------------
roc mean across methods is 0.636
prc mean across methods is 0.174


Repetition:  3
 • seed                     - 3
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.91020408 0.08979592] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.90900302 0.09099698]
before perturbation, mean and variance of data mean embedding are 0.004245 and 0.047924 
after perturbation, mean and variance of data mean embedding are 0.002535 and 0.170224 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.496
PRC on test generated data is 0.073

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.556
PRC on test generated data is 0.176

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.487
PRC on test generated data is 0.073

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.538
PRC on test generated data is 0.087

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.547
PRC on test generated data is 0.102

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.538
PRC on test generated data is 0.087

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.556
PRC on test generated data is 0.176

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.556
PRC on test generated data is 0.176

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.500
PRC on test generated data is 0.073

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.073
----------------------------------------
roc mean across methods is 0.523
prc mean across methods is 0.104


Repetition:  4
 • seed                     - 4
 • data_name                - cervical
 • batch_rate               - 0.5
 • epochs                   - 800
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.005
 • order_hermite            - 100
 • undersampled_rate        - 0.8
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - cervical_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/cervical_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.005_br=0.5_lr=0.01_n_epoch=800_undersam_rate=0.8_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
dataset is cervical
raw input features (753, 34)
raw input features (753, 34)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.90204082 0.09795918] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.91059478 0.08940522]
before perturbation, mean and variance of data mean embedding are 0.004203 and 0.046783 
after perturbation, mean and variance of data mean embedding are 0.006346 and 0.172887 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.596
PRC on test generated data is 0.133

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.570
PRC on test generated data is 0.058

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.679
PRC on test generated data is 0.139

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.592
PRC on test generated data is 0.099

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.641
PRC on test generated data is 0.074

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.592
PRC on test generated data is 0.099

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.587
PRC on test generated data is 0.083

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.041

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.600
PRC on test generated data is 0.233

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.566
PRC on test generated data is 0.055

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.596
PRC on test generated data is 0.133

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.553
PRC on test generated data is 0.049
----------------------------------------
roc mean across methods is 0.589
prc mean across methods is 0.099


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.57021406 0.52721032 0.6527512  0.54471387 0.6585004  0.57406304
 0.63044588 0.51111111 0.53111111 0.51231944 0.56010994 0.52143771]
Average PRC each method:  [0.12893758 0.09067073 0.18195732 0.11404568 0.21468835 0.12777766
 0.20289973 0.100271   0.13864499 0.08249322 0.12880759 0.08662602]
Std ROC each method:  [0.03777759 0.0333578  0.15281694 0.03768367 0.16357629 0.03471606
 0.1762082  0.02222222 0.04061259 0.02694766 0.03574414 0.03659171]
Std PRC each method:  [0.04729554 0.04147728 0.07875938 0.04667795 0.18810254 0.04804966
 0.1924662  0.04917038 0.06109187 0.02829538 0.04155642 0.0385743 ]
Average over repetitions across all methods
Average ROC:  0.5661656736671736
Average PRC:  0.1331516559858604
Std ROC:  0.04191092089528286
Variance PRC:  0.02892298096071508 


 -------------------------------------------------------------------------------- 





 ******************************
cervical
Max ROC!  0.5651727529562776
Max PRC!  0.14338147172035215
Setup:  {'batch_rate': 0.5, 'kernel_length': 0.005, 'n_epochs': 800, 'order_hermite': 20, 'subsampled_rate': 0.8}
****************************************************************************************************



{'batch_rate': 0.5, 'kernel_length': 0.0005, 'n_epochs': 1400, 'order_hermite': 10, 'subsampled_rate': 0.001} 


Repetition:  0
 • seed                     - 0
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 10
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=0_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.35967742 0.64032258] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.36371446 0.63628554]
before perturbation, mean and variance of data mean embedding are 0.036494 and 0.111809 
after perturbation, mean and variance of data mean embedding are 0.032186 and 0.157875 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.766
PRC on test generated data is 0.794

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.868
PRC on test generated data is 0.897

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.862
PRC on test generated data is 0.860

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.774
PRC on test generated data is 0.802

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.898
PRC on test generated data is 0.900

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.500
PRC on test generated data is 0.609

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.898
PRC on test generated data is 0.900

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.896
PRC on test generated data is 0.901

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.928
PRC on test generated data is 0.932

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.898
PRC on test generated data is 0.900

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.782
PRC on test generated data is 0.811

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.898
PRC on test generated data is 0.900
----------------------------------------
roc mean across methods is 0.831
prc mean across methods is 0.850


Repetition:  1
 • seed                     - 1
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 10
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=1_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36129032 0.63870968] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.37113761 0.62886239]
before perturbation, mean and variance of data mean embedding are 0.036396 and 0.111225 
after perturbation, mean and variance of data mean embedding are 0.033080 and 0.169614 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.880
PRC on test generated data is 0.908

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.869
PRC on test generated data is 0.892

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.670
PRC on test generated data is 0.708

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.823
PRC on test generated data is 0.836

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.907
PRC on test generated data is 0.918

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.837
PRC on test generated data is 0.853

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.907
PRC on test generated data is 0.918

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.833
PRC on test generated data is 0.834

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.887
PRC on test generated data is 0.894

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.696
PRC on test generated data is 0.725

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.844
PRC on test generated data is 0.880

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.804
PRC on test generated data is 0.806
----------------------------------------
roc mean across methods is 0.830
prc mean across methods is 0.848


Repetition:  2
 • seed                     - 2
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 10
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=2_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36451613 0.63548387] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.37591414 0.62408586]
before perturbation, mean and variance of data mean embedding are 0.036226 and 0.111036 
after perturbation, mean and variance of data mean embedding are 0.032759 and 0.164452 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.801
PRC on test generated data is 0.821

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.794
PRC on test generated data is 0.831

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.712
PRC on test generated data is 0.747

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.669
PRC on test generated data is 0.719

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.850
PRC on test generated data is 0.872

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.744
PRC on test generated data is 0.793

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.899
PRC on test generated data is 0.912

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.913
PRC on test generated data is 0.925

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.930
PRC on test generated data is 0.944

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.911
PRC on test generated data is 0.918

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.852
PRC on test generated data is 0.890

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.850
PRC on test generated data is 0.872
----------------------------------------
roc mean across methods is 0.827
prc mean across methods is 0.854


Repetition:  3
 • seed                     - 3
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 10
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=3_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.37258065 0.62741935] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.37114128 0.62885872]
before perturbation, mean and variance of data mean embedding are 0.036387 and 0.111564 
after perturbation, mean and variance of data mean embedding are 0.031495 and 0.161631 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.773
PRC on test generated data is 0.837

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.594
PRC on test generated data is 0.705

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.862
PRC on test generated data is 0.883

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.720
PRC on test generated data is 0.796

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.733
PRC on test generated data is 0.792

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.767
PRC on test generated data is 0.842

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.607
PRC on test generated data is 0.733

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.798
PRC on test generated data is 0.845

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.752
PRC on test generated data is 0.805

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.628
PRC on test generated data is 0.726

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.820
PRC on test generated data is 0.878

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.607
PRC on test generated data is 0.733
----------------------------------------
roc mean across methods is 0.722
prc mean across methods is 0.798


Repetition:  4
 • seed                     - 4
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 10
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=4_order=10_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36935484 0.63064516] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.36847975 0.63152025]
before perturbation, mean and variance of data mean embedding are 0.036363 and 0.111555 
after perturbation, mean and variance of data mean embedding are 0.034928 and 0.164204 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.734
PRC on test generated data is 0.777

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.543
PRC on test generated data is 0.668

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.771
PRC on test generated data is 0.803

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.604
PRC on test generated data is 0.699

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.814
PRC on test generated data is 0.862

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.813
PRC on test generated data is 0.838

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.814
PRC on test generated data is 0.862

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.823
PRC on test generated data is 0.869

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.852
PRC on test generated data is 0.892

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.852
PRC on test generated data is 0.892

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.789
PRC on test generated data is 0.815

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.814
PRC on test generated data is 0.862
----------------------------------------
roc mean across methods is 0.769
prc mean across methods is 0.820


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.79080245 0.73357829 0.77553759 0.71812025 0.84025731 0.73240117
 0.82499359 0.85270951 0.86993718 0.79710469 0.81757334 0.79448118]
Average PRC each method:  [0.82738597 0.79859491 0.80024992 0.77021649 0.8687538  0.78697047
 0.8648422  0.87496974 0.8934935  0.83217344 0.85469645 0.83461062]
Std ROC each method:  [0.04955656 0.13844504 0.07774577 0.07682622 0.06364924 0.12078048
 0.11434844 0.0440669  0.06573173 0.11402284 0.02799435 0.09949013]
Std PRC each method:  [0.0453149  0.0950995  0.06594845 0.05220029 0.04328852 0.09134647
 0.0687857  0.03380611 0.04902604 0.08748668 0.03442538 0.05937421]
Average over repetitions across all methods
Average ROC:  0.7956247125662947
Average PRC:  0.833913124632623
Std ROC:  0.043818959988093154
Variance PRC:  0.02168871012755258 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.5, 'kernel_length': 0.0005, 'n_epochs': 1400, 'order_hermite': 20, 'subsampled_rate': 0.001} 


Repetition:  0
 • seed                     - 0
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 20
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=0_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.35967742 0.64032258] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.35428239 0.64571761]
before perturbation, mean and variance of data mean embedding are 0.019674 and 0.082846 
after perturbation, mean and variance of data mean embedding are 0.017977 and 0.143364 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.877
PRC on test generated data is 0.878

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.811
PRC on test generated data is 0.852

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.864
PRC on test generated data is 0.856

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.689
PRC on test generated data is 0.715

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.916
PRC on test generated data is 0.934

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.713
PRC on test generated data is 0.742

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.916
PRC on test generated data is 0.934

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.910
PRC on test generated data is 0.922

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.913
PRC on test generated data is 0.928

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.877
PRC on test generated data is 0.884

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.748
PRC on test generated data is 0.759

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.749
PRC on test generated data is 0.763
----------------------------------------
roc mean across methods is 0.832
prc mean across methods is 0.847


Repetition:  1
 • seed                     - 1
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 20
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=1_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36129032 0.63870968] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.3588118 0.6411882]
before perturbation, mean and variance of data mean embedding are 0.019618 and 0.082753 
after perturbation, mean and variance of data mean embedding are 0.016735 and 0.146356 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.771
PRC on test generated data is 0.824

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.645
PRC on test generated data is 0.696

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.625
PRC on test generated data is 0.681

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.828
PRC on test generated data is 0.851

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.879
PRC on test generated data is 0.900

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.901
PRC on test generated data is 0.907

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.850
PRC on test generated data is 0.860

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.891
PRC on test generated data is 0.916

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.924
PRC on test generated data is 0.940

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.831
PRC on test generated data is 0.835

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.818
PRC on test generated data is 0.860

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.879
PRC on test generated data is 0.900
----------------------------------------
roc mean across methods is 0.820
prc mean across methods is 0.847


Repetition:  2
 • seed                     - 2
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 20
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=2_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36451613 0.63548387] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.37973199 0.62026801]
before perturbation, mean and variance of data mean embedding are 0.019535 and 0.082456 
after perturbation, mean and variance of data mean embedding are 0.015954 and 0.143371 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.750
PRC on test generated data is 0.814

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.629
PRC on test generated data is 0.697

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.783
PRC on test generated data is 0.799

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.745
PRC on test generated data is 0.810

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.920
PRC on test generated data is 0.937

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.619
PRC on test generated data is 0.696

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.825
PRC on test generated data is 0.840

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.906
PRC on test generated data is 0.923

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.934
PRC on test generated data is 0.951

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.916
PRC on test generated data is 0.931

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.760
PRC on test generated data is 0.813

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.920
PRC on test generated data is 0.937
----------------------------------------
roc mean across methods is 0.809
prc mean across methods is 0.846


Repetition:  3
 • seed                     - 3
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 20
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=3_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.37258065 0.62741935] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.36590149 0.63409851]
before perturbation, mean and variance of data mean embedding are 0.019560 and 0.082758 
after perturbation, mean and variance of data mean embedding are 0.018631 and 0.149074 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.835
PRC on test generated data is 0.885

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.649
PRC on test generated data is 0.736

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.584
PRC on test generated data is 0.701

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.827
PRC on test generated data is 0.863

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.837
PRC on test generated data is 0.868

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.816
PRC on test generated data is 0.875

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.837
PRC on test generated data is 0.868

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.762
PRC on test generated data is 0.809

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.888
PRC on test generated data is 0.924

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.684
PRC on test generated data is 0.755

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.767
PRC on test generated data is 0.813

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.518
PRC on test generated data is 0.669
----------------------------------------
roc mean across methods is 0.750
prc mean across methods is 0.814


Repetition:  4
 • seed                     - 4
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 20
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=4_order=20_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36935484 0.63064516] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.35894115 0.64105885]
before perturbation, mean and variance of data mean embedding are 0.019630 and 0.082921 
after perturbation, mean and variance of data mean embedding are 0.022956 and 0.147389 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.797
PRC on test generated data is 0.841

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.737
PRC on test generated data is 0.801

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.695
PRC on test generated data is 0.753

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.819
PRC on test generated data is 0.850

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.881
PRC on test generated data is 0.916

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.685
PRC on test generated data is 0.760

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.872
PRC on test generated data is 0.890

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.882
PRC on test generated data is 0.913

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.906
PRC on test generated data is 0.934

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.842
PRC on test generated data is 0.870

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.774
PRC on test generated data is 0.821

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.872
PRC on test generated data is 0.890
----------------------------------------
roc mean across methods is 0.813
prc mean across methods is 0.853


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.80590615 0.69409416 0.71038802 0.78175287 0.88670389 0.74673354
 0.86006885 0.87014526 0.91295556 0.83018933 0.77312276 0.78767289]
Average PRC each method:  [0.84820635 0.75635387 0.75790245 0.8179902  0.91095558 0.79603355
 0.87849685 0.89668827 0.93525157 0.85465681 0.81317833 0.83170917]
Std ROC each method:  [0.04535108 0.06932707 0.10234527 0.05581309 0.02988987 0.09980002
 0.03188311 0.05504492 0.01552398 0.07900912 0.02388938 0.14631086]
Std PRC each method:  [0.02844143 0.06109909 0.06412432 0.05436204 0.02531797 0.08068401
 0.03220827 0.04391613 0.00938451 0.05876349 0.03211238 0.10040444]
Average over repetitions across all methods
Average ROC:  0.804977774784508
Average PRC:  0.8414519163857138
Std ROC:  0.02831728280708864
Variance PRC:  0.014104760656985668 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.5, 'kernel_length': 0.0005, 'n_epochs': 1400, 'order_hermite': 50, 'subsampled_rate': 0.001} 


Repetition:  0
 • seed                     - 0
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 50
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=0_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.35967742 0.64032258] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.34624965 0.65375035]
before perturbation, mean and variance of data mean embedding are 0.008229 and 0.054163 
after perturbation, mean and variance of data mean embedding are 0.004789 and 0.130115 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.732
PRC on test generated data is 0.790

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.656
PRC on test generated data is 0.704

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.791
PRC on test generated data is 0.793

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.720
PRC on test generated data is 0.774

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.703
PRC on test generated data is 0.724

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.604
PRC on test generated data is 0.665

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.899
PRC on test generated data is 0.914

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.836
PRC on test generated data is 0.840

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.908
PRC on test generated data is 0.924

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.742
PRC on test generated data is 0.754

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.725
PRC on test generated data is 0.773

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.641
PRC on test generated data is 0.686
----------------------------------------
roc mean across methods is 0.746
prc mean across methods is 0.778


Repetition:  1
 • seed                     - 1
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 50
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=1_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36129032 0.63870968] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.37145383 0.62854617]
before perturbation, mean and variance of data mean embedding are 0.008251 and 0.053990 
after perturbation, mean and variance of data mean embedding are 0.005171 and 0.130934 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.758
PRC on test generated data is 0.782

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.870
PRC on test generated data is 0.900

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.777
PRC on test generated data is 0.790

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.744
PRC on test generated data is 0.768

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.829
PRC on test generated data is 0.858

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.631
PRC on test generated data is 0.688

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.649
PRC on test generated data is 0.700

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.849
PRC on test generated data is 0.884

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.798
PRC on test generated data is 0.812

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.716
PRC on test generated data is 0.745

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.724
PRC on test generated data is 0.751

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.829
PRC on test generated data is 0.858
----------------------------------------
roc mean across methods is 0.764
prc mean across methods is 0.795


Repetition:  2
 • seed                     - 2
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 50
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=2_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36451613 0.63548387] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.38825008 0.61174992]
before perturbation, mean and variance of data mean embedding are 0.008240 and 0.053845 
after perturbation, mean and variance of data mean embedding are 0.005674 and 0.131497 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.831
PRC on test generated data is 0.864

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.861
PRC on test generated data is 0.871

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.648
PRC on test generated data is 0.706

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.817
PRC on test generated data is 0.844

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.751
PRC on test generated data is 0.796

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.913
PRC on test generated data is 0.936

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.807
PRC on test generated data is 0.836

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.834
PRC on test generated data is 0.848

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.875
PRC on test generated data is 0.891

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.770
PRC on test generated data is 0.789

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.805
PRC on test generated data is 0.837

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.807
PRC on test generated data is 0.836
----------------------------------------
roc mean across methods is 0.810
prc mean across methods is 0.838


Repetition:  3
 • seed                     - 3
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 50
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=3_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.37258065 0.62741935] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.3776098 0.6223902]
before perturbation, mean and variance of data mean embedding are 0.008272 and 0.054125 
after perturbation, mean and variance of data mean embedding are 0.008537 and 0.133038 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.856
PRC on test generated data is 0.888

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.773
PRC on test generated data is 0.835

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.744
PRC on test generated data is 0.794

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.599
PRC on test generated data is 0.708

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.884
PRC on test generated data is 0.912

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.884
PRC on test generated data is 0.918

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.884
PRC on test generated data is 0.918

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.720
PRC on test generated data is 0.779

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.913
PRC on test generated data is 0.938

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.871
PRC on test generated data is 0.896

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.768
PRC on test generated data is 0.809

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.835
PRC on test generated data is 0.885
----------------------------------------
roc mean across methods is 0.811
prc mean across methods is 0.857


Repetition:  4
 • seed                     - 4
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 50
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=4_order=50_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36935484 0.63064516] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.36296498 0.63703502]
before perturbation, mean and variance of data mean embedding are 0.008208 and 0.054205 
after perturbation, mean and variance of data mean embedding are 0.011406 and 0.132930 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.842
PRC on test generated data is 0.888

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.799
PRC on test generated data is 0.852

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.697
PRC on test generated data is 0.756

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.786
PRC on test generated data is 0.824

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.844
PRC on test generated data is 0.881

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.812
PRC on test generated data is 0.867

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.866
PRC on test generated data is 0.906

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.887
PRC on test generated data is 0.917

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.907
PRC on test generated data is 0.931

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.856
PRC on test generated data is 0.882

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.845
PRC on test generated data is 0.879

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.823
PRC on test generated data is 0.845
----------------------------------------
roc mean across methods is 0.830
prc mean across methods is 0.869


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.80370401 0.79171423 0.73152613 0.73329254 0.80219373 0.76891335
 0.82109261 0.82525287 0.88008403 0.79078525 0.77337728 0.7871547 ]
Average PRC each method:  [0.84255883 0.83233751 0.76780759 0.78354391 0.83414103 0.81472643
 0.85464255 0.85347697 0.8990542  0.81313637 0.80983333 0.8219047 ]
Std ROC each method:  [0.04932331 0.07712664 0.05267629 0.07505294 0.06599317 0.12797772
 0.09158127 0.05575018 0.04317217 0.06190541 0.04688112 0.07360196]
Std PRC each method:  [0.0471344  0.06769237 0.03376952 0.04762217 0.06703747 0.11529558
 0.0829622  0.04638475 0.04643819 0.06375571 0.04533383 0.07013459]
Average over repetitions across all methods
Average ROC:  0.7924242265319486
Average PRC:  0.8272636190296042
Std ROC:  0.031575102286630116
Variance PRC:  0.0351297130767081 


 -------------------------------------------------------------------------------- 



{'batch_rate': 0.5, 'kernel_length': 0.0005, 'n_epochs': 1400, 'order_hermite': 100, 'subsampled_rate': 0.001} 


Repetition:  0
 • seed                     - 0
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 100
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=0_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.35967742 0.64032258] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.35964319 0.64035681]
before perturbation, mean and variance of data mean embedding are 0.004203 and 0.038709 
after perturbation, mean and variance of data mean embedding are 0.003675 and 0.125354 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.682
PRC on test generated data is 0.722

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.536
PRC on test generated data is 0.627

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.877
PRC on test generated data is 0.878

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.661
PRC on test generated data is 0.719

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.685
PRC on test generated data is 0.725

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.684
PRC on test generated data is 0.715

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.685
PRC on test generated data is 0.725

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.731
PRC on test generated data is 0.745

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.857
PRC on test generated data is 0.881

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.685
PRC on test generated data is 0.725

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.684
PRC on test generated data is 0.731

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.710
PRC on test generated data is 0.731
----------------------------------------
roc mean across methods is 0.706
prc mean across methods is 0.744


Repetition:  1
 • seed                     - 1
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 100
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=1_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36129032 0.63870968] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.339648 0.660352]
before perturbation, mean and variance of data mean embedding are 0.004195 and 0.038584 
after perturbation, mean and variance of data mean embedding are 0.003610 and 0.126291 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.733
PRC on test generated data is 0.775

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.875
PRC on test generated data is 0.904

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.658
PRC on test generated data is 0.701

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.765
PRC on test generated data is 0.798

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.862
PRC on test generated data is 0.880

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.856
PRC on test generated data is 0.858

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.692
PRC on test generated data is 0.722

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.887
PRC on test generated data is 0.910

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.896
PRC on test generated data is 0.903

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.721
PRC on test generated data is 0.742

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.775
PRC on test generated data is 0.808

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.862
PRC on test generated data is 0.880
----------------------------------------
roc mean across methods is 0.799
prc mean across methods is 0.823


Repetition:  2
 • seed                     - 2
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 100
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=2_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36451613 0.63548387] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.3473038 0.6526962]
before perturbation, mean and variance of data mean embedding are 0.004212 and 0.038477 
after perturbation, mean and variance of data mean embedding are 0.001415 and 0.127123 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.686
PRC on test generated data is 0.730

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.889
PRC on test generated data is 0.914

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.745
PRC on test generated data is 0.770

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.550
PRC on test generated data is 0.653

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.923
PRC on test generated data is 0.943

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.675
PRC on test generated data is 0.731

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.923
PRC on test generated data is 0.943

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.906
PRC on test generated data is 0.923

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.920
PRC on test generated data is 0.937

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.855
PRC on test generated data is 0.869

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.819
PRC on test generated data is 0.850

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.846
PRC on test generated data is 0.860
----------------------------------------
roc mean across methods is 0.812
prc mean across methods is 0.844


Repetition:  3
 • seed                     - 3
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 100
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=3_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.37258065 0.62741935] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.37823185 0.62176815]
before perturbation, mean and variance of data mean embedding are 0.004205 and 0.038669 
after perturbation, mean and variance of data mean embedding are 0.001912 and 0.126067 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.840
PRC on test generated data is 0.891

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.860
PRC on test generated data is 0.899

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.682
PRC on test generated data is 0.755

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.724
PRC on test generated data is 0.784

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.815
PRC on test generated data is 0.846

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.815
PRC on test generated data is 0.846

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.815
PRC on test generated data is 0.846

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.869
PRC on test generated data is 0.911

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.865
PRC on test generated data is 0.897

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.819
PRC on test generated data is 0.851

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.811
PRC on test generated data is 0.871

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.826
PRC on test generated data is 0.876
----------------------------------------
roc mean across methods is 0.812
prc mean across methods is 0.856


Repetition:  4
 • seed                     - 4
 • data_name                - credit
 • batch_rate               - 0.5
 • epochs                   - 1400
 • lr                       - 0.01
 • lr_decay                 - 0.9
 • is_private               - True
 • epsilon                  - 1.0
 • delta                    - 1e-05
 • heuristic_sigma          - True
 • kernel_length            - 0.0005
 • order_hermite            - 100
 • undersampled_rate        - 0.001
 • separate_kernel_length   - True
 • normalize_data           - False
 • classifiers              - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 • log_name                 - credit_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue
 • log_dir                  - logs/gen/credit_seed=4_order=100_private=True_epsilon=1.0_delta=1e-05_heuristic_sigma=True_kernel_length=0.0005_br=0.5_lr=0.01_n_epoch=1400_undersam_rate=0.001_normalize_dataFalse_separate_kernel_lengthTrue/
-------------------------------------------
Creditcard fraud detection dataset
(284807, 29)
testing non-standardized data
we use the median heuristic for length scale
we use a separate length scale on each coordinate of the data
computing mean embedding of data: (1) compute the weights

 weights with no privatization are [0.36935484 0.63064516] 

private
eps,delta = (1.0,1e-05) ==> Noise level sigma= 6.930431582631886
weights after privatization are [0.36768381 0.63231619]
before perturbation, mean and variance of data mean embedding are 0.004195 and 0.038654 
after perturbation, mean and variance of data mean embedding are 0.005128 and 0.126566 

 generated data


 <class 'sklearn.linear_model._logistic.LogisticRegression'>
logistic regression with balanced class weight
logistic regression with saga solver
logistic regression with liblinear solver
logistic regression with liblinear solver
ROC on test generated data is 0.885
PRC on test generated data is 0.904

 <class 'sklearn.naive_bayes.GaussianNB'>
training again
ROC on test generated data is 0.875
PRC on test generated data is 0.899

 <class 'sklearn.naive_bayes.BernoulliNB'>
training again
training again
training again
training again
training again
ROC on test generated data is 0.716
PRC on test generated data is 0.765

 <class 'sklearn.svm._classes.LinearSVC'>
training again
training again
training again
ROC on test generated data is 0.702
PRC on test generated data is 0.759

 <class 'sklearn.tree._classes.DecisionTreeClassifier'>
training again
training again
training again
ROC on test generated data is 0.876
PRC on test generated data is 0.913

 <class 'sklearn.discriminant_analysis.LinearDiscriminantAnalysis'>
test LDA with different hyperparameters
ROC on test generated data is 0.789
PRC on test generated data is 0.822

 <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
ROC on test generated data is 0.876
PRC on test generated data is 0.913

 <class 'sklearn.ensemble._bagging.BaggingClassifier'>
test Bagging with different hyperparameters
ROC on test generated data is 0.891
PRC on test generated data is 0.923

 <class 'sklearn.ensemble._forest.RandomForestClassifier'>
training again
training again
training again
training again
ROC on test generated data is 0.911
PRC on test generated data is 0.937

 <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
ROC on test generated data is 0.868
PRC on test generated data is 0.885

 <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
ROC on test generated data is 0.798
PRC on test generated data is 0.829

 <class 'xgboost.sklearn.XGBClassifier'>
test XGB with different hyperparameters
ROC on test generated data is 0.870
PRC on test generated data is 0.896
----------------------------------------
roc mean across methods is 0.838
prc mean across methods is 0.870


 ---------------------------------------- 


For each of the methods
Average ROC each method:  [0.76543568 0.80690636 0.73566344 0.68030752 0.83239588 0.76363477
 0.79822921 0.85689306 0.88982854 0.78945624 0.77732101 0.82268318]
Average PRC each method:  [0.80453818 0.8485345  0.77383854 0.74245895 0.8614278  0.79440668
 0.82973101 0.88239254 0.91089093 0.8145908  0.81774611 0.84864731]
Std ROC each method:  [0.08253044 0.13582895 0.07634618 0.07314007 0.08135745 0.07213407
 0.09607999 0.06419602 0.02471215 0.07322732 0.04892123 0.05849061]
Std PRC each method:  [0.07829949 0.11100966 0.05761071 0.05244034 0.07541766 0.05962485
 0.09225467 0.06890882 0.02249661 0.06702071 0.04843873 0.05980096]
Average over repetitions across all methods
Average ROC:  0.7932295745677136
Average PRC:  0.8274336113143939
Std ROC:  0.0452315658129448
Variance PRC:  0.04462002599591345 


 -------------------------------------------------------------------------------- 





 ******************************
credit
Max ROC!  0.804977774784508
Max PRC!  0.8414519163857138
Setup:  {'batch_rate': 0.5, 'kernel_length': 0.0005, 'n_epochs': 1400, 'order_hermite': 20, 'subsampled_rate': 0.001}
****************************************************************************************************
